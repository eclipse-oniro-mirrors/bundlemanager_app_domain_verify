From 98d33921d87937a8170820b06c180592730cfdcb Mon Sep 17 00:00:00 2001
From: woohoa <wanghuan36@huawei.com>
Date: Thu, 31 Oct 2024 21:01:38 +0800
Subject: [PATCH] support deferred link opt ipc with bms/ut

Change-Id: Ifa4a08eb074e3da54f917a0431e49b784b440ac7
---
 .../common/include/bms/bundle_info_query.h    |   7 +-
 .../common/src/bms/bundle_info_query.cpp      |  42 +---
 .../core/app_domain_verify_mgr_service.h      |   2 +-
 .../manager/deferred_link/ability_filter.h    |   4 +-
 .../manager/deferred_link/deferred_link_mgr.h |   2 -
 .../core/app_domain_verify_mgr_service.cpp    |   6 +-
 .../manager/deferred_link/ability_filter.cpp  |  55 ++---
 .../deferred_link/deferred_link_mgr.cpp       |  38 ++--
 test/unittest/BUILD.gn                        |   1 +
 .../app_domain_verify_mgr_client_test.cpp     |  19 ++
 .../frameworks_common/bms_test/BUILD.gn       |   4 +
 .../bms_test/bundle_info_query_test.cpp       |  15 ++
 .../mock/include/mock_bundle_manager.h        |   9 +
 .../unittest/mock/src/mock_bundle_manager.cpp |  21 +-
 .../services/ability_filter_test/BUILD.gn     |  84 +++++++
 .../ability_filter_test.cpp                   | 206 ++++++++++++++++++
 .../services/deferred_link_test/BUILD.gn      |   2 +-
 .../deferred_link_mgr_test.cpp                |  12 +-
 .../mock_ability_filter.cpp                   |  30 +++
 .../deferred_link_test/mock_ability_filter.h  |   2 +-
 20 files changed, 444 insertions(+), 117 deletions(-)
 create mode 100644 test/unittest/services/ability_filter_test/BUILD.gn
 create mode 100644 test/unittest/services/ability_filter_test/ability_filter_test.cpp
 create mode 100644 test/unittest/services/deferred_link_test/mock_ability_filter.cpp

diff --git a/frameworks/common/include/bms/bundle_info_query.h b/frameworks/common/include/bms/bundle_info_query.h
index f8ed716..c48845c 100644
--- a/frameworks/common/include/bms/bundle_info_query.h
+++ b/frameworks/common/include/bms/bundle_info_query.h
@@ -24,13 +24,10 @@ using AbilityInfo = OHOS::AppExecFwk::AbilityInfo;
 constexpr const char* ACTION_VIEW_DATA = "ohos.want.action.viewData";
 constexpr const char* ENTITY_BROWSER = "entity.system.browsable";
 class BundleInfoQuery {
-
 public:
     static bool GetBundleInfo(const std::string& bundleName, std::string& appIdentifier, std::string& fingerprint);
-    static bool GetBundleNameForUid(const int uid, std::string& bundleName);
-    static bool QueryAbilityInfosByUrl(
-        const std::string& bundleName, const std::string& url, std::vector<AbilityInfo>& abilityInfos);
-    static bool GetBundleInfosV9(const std::string& bundleName, std::vector<AbilityInfo>& abilityInfos);
+    static bool GetBundleNameForUid(int uid, std::string& bundleName);
+    static bool GetBundleAbilityInfos(const std::string& bundleName, std::vector<AbilityInfo>& abilityInfos);
 
 private:
     static sptr<AppExecFwk::IBundleMgr> GetBundleMgrProxy();
diff --git a/frameworks/common/src/bms/bundle_info_query.cpp b/frameworks/common/src/bms/bundle_info_query.cpp
index d6d03f9..daefb9d 100644
--- a/frameworks/common/src/bms/bundle_info_query.cpp
+++ b/frameworks/common/src/bms/bundle_info_query.cpp
@@ -23,7 +23,6 @@
 
 namespace OHOS {
 namespace AppDomainVerify {
-constexpr int USER_ID_DEFAULT = 100;
 bool BundleInfoQuery::GetBundleInfo(const std::string& bundleName, std::string& appIdentifier, std::string& fingerprint)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
@@ -108,7 +107,7 @@ bool BundleInfoQuery::GetBundleNameForUid(const int uid, std::string& bundleName
     std::string identity = IPCSkeleton::ResetCallingIdentity();
     auto ret = bundleMgrProxy->GetBundleNameForUid(uid, bundleName);
     IPCSkeleton::SetCallingIdentity(identity);
-    if (ret != ERR_OK) {
+    if (!ret) {
         APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
         return false;
     }
@@ -116,36 +115,7 @@ bool BundleInfoQuery::GetBundleNameForUid(const int uid, std::string& bundleName
     return true;
 }
 
-bool BundleInfoQuery::QueryAbilityInfosByUrl(
-    const std::string& bundleName, const std::string& url, std::vector<AbilityInfo>& abilityInfos)
-{
-    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
-    sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
-
-    if (bundleMgrProxy == nullptr) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "bundleMgrProxy is nullptr.");
-        UNIVERSAL_ERROR_EVENT(CONNECT_OTHER_FAULT);
-        return false;
-    }
-    Want want;
-    //    want.SetBundle(bundleName);
-    want.SetUri(url);
-    want.AddEntity(ENTITY_BROWSER);
-    want.SetAction(ACTION_VIEW_DATA);
-
-    // use sa identity
-    std::string identity = IPCSkeleton::ResetCallingIdentity();
-    auto ret = bundleMgrProxy->QueryAbilityInfosV9(
-        want, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, USER_ID_DEFAULT, abilityInfos);
-    IPCSkeleton::SetCallingIdentity(identity);
-    if (ret != ERR_OK) {
-        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
-        return false;
-    }
-    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
-    return true;
-}
-bool BundleInfoQuery::GetBundleInfosV9(const std::string& bundleName, std::vector<AbilityInfo>& abilityInfos)
+bool BundleInfoQuery::GetBundleAbilityInfos(const std::string& bundleName, std::vector<AbilityInfo>& abilityInfos)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
     sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
@@ -159,13 +129,13 @@ bool BundleInfoQuery::GetBundleInfosV9(const std::string& bundleName, std::vecto
     AppExecFwk::BundleInfo bundleInfo;
     // use sa identity
     std::string identity = IPCSkeleton::ResetCallingIdentity();
-    auto ret = bundleMgrProxy->GetBundleInfoV9(
-        bundleName, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, bundleInfo, USER_ID_DEFAULT);
+    auto ret = bundleMgrProxy->GetBundleInfo(bundleName, AppExecFwk::BundleFlag::GET_BUNDLE_WITH_ABILITIES, bundleInfo);
     IPCSkeleton::SetCallingIdentity(identity);
-    if (ret != ERR_OK) {
-        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
+    if (!ret) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
         return false;
     }
+    abilityInfos = bundleInfo.abilityInfos;
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
     return true;
 };
diff --git a/services/include/manager/core/app_domain_verify_mgr_service.h b/services/include/manager/core/app_domain_verify_mgr_service.h
index 97304f9..114d68f 100644
--- a/services/include/manager/core/app_domain_verify_mgr_service.h
+++ b/services/include/manager/core/app_domain_verify_mgr_service.h
@@ -65,7 +65,7 @@ private:
     bool IsWantImplicit(const OHOS::AAFwk::Want& want);
     static int CheckPermission();
     static void CollectDomains(const std::vector<SkillUri>& skillUris, VerifyResultInfo& verifyResultInfo);
-
+    bool IsUrlInBlackList(const std::string& url);
 private:
     std::shared_ptr<AppDomainVerifyDataMgr> dataManager_ = nullptr;
     bool InitConfigMgr();
diff --git a/services/include/manager/deferred_link/ability_filter.h b/services/include/manager/deferred_link/ability_filter.h
index 79cafb0..df693a4 100644
--- a/services/include/manager/deferred_link/ability_filter.h
+++ b/services/include/manager/deferred_link/ability_filter.h
@@ -21,7 +21,6 @@
 
 namespace OHOS::AppDomainVerify {
 struct FilterInfo {
-    std::string bundleName;
     std::string url;
 };
 class AbilityFilter {
@@ -33,9 +32,8 @@ public:
      * @return bool return true if can match abilities else false.
      */
     virtual bool Filter(const FilterInfo& info) = 0;
-    virtual void SetBundleName(const std::string& bundleName);
     virtual ~AbilityFilter() = default;
-    static std::shared_ptr<AbilityFilter> Create();
+    static std::shared_ptr<AbilityFilter> Create(const std::string& bundleName);
 };
 }
 #endif  // APP_DOMAIN_VERIFY_ABILITY_FILTER_H
diff --git a/services/include/manager/deferred_link/deferred_link_mgr.h b/services/include/manager/deferred_link/deferred_link_mgr.h
index a6869d5..ad161fd 100644
--- a/services/include/manager/deferred_link/deferred_link_mgr.h
+++ b/services/include/manager/deferred_link/deferred_link_mgr.h
@@ -60,7 +60,6 @@ public:
     ~DeferredLinkMgr();
 
 private:
-    bool CanMatchAbility(const std::string& bundleName, const std::string& url);
     void PostAgeCacheTask();
     void AgeCacheProcess();
     void CheckStartTimerUnlocked();
@@ -74,7 +73,6 @@ private:
     std::mutex cachesMutex_;
     std::shared_ptr<AppExecFwk::EventHandler> ageHandler_;
     std::shared_ptr<AppExecFwk::EventRunner> ageRunner_;
-    std::shared_ptr<AbilityFilter> abilityFilter_ = AbilityFilter::Create();
 };
 }
 #endif  // APP_DOMAIN_VERIFY_DEFERRED_LINK_MGR_H
diff --git a/services/src/manager/core/app_domain_verify_mgr_service.cpp b/services/src/manager/core/app_domain_verify_mgr_service.cpp
index 2f9d918..49568c2 100644
--- a/services/src/manager/core/app_domain_verify_mgr_service.cpp
+++ b/services/src/manager/core/app_domain_verify_mgr_service.cpp
@@ -110,7 +110,7 @@ bool AppDomainVerifyMgrService::FilterAbilities(const OHOS::AAFwk::Want& want,
             }
         }
     }
-    if (filteredAbilityInfos.empty()) {
+    if (filteredAbilityInfos.empty() && !IsUrlInBlackList(uriString)) {
         deferredLinkMgr_->PutDeferredLink(
             { .domain = hostVerifyKey, .url = uriString, .timeStamp = GetSecondsSince1970ToNow() });
     }
@@ -352,5 +352,9 @@ int AppDomainVerifyMgrService::GetDeferredLink(std::string& link)
         return CommonErrorCode::E_PERMISSION_DENIED;
     }
 }
+bool AppDomainVerifyMgrService::IsUrlInBlackList(const std::string& url)
+{
+    return IsAtomicServiceUrl(url);
+}
 }  // namespace AppDomainVerify
 }  // namespace OHOS
diff --git a/services/src/manager/deferred_link/ability_filter.cpp b/services/src/manager/deferred_link/ability_filter.cpp
index 3b7bef7..e918806 100644
--- a/services/src/manager/deferred_link/ability_filter.cpp
+++ b/services/src/manager/deferred_link/ability_filter.cpp
@@ -13,72 +13,47 @@
  * limitations under the License.
  */
 #include <string>
+#include <utility>
 #include "ability_filter.h"
 #include "bundle_info_query.h"
 #include "app_domain_verify_hilog.h"
 
 namespace OHOS::AppDomainVerify {
 using Skill = OHOS::AppExecFwk::Skill;
-class AbilityFilterImpl : public AbilityFilter {
-public:
-    void SetBundleName(const std::string& bundleName) override
-    {
-        AbilityFilter::SetBundleName(bundleName);
-    }
-    bool Filter(const FilterInfo& info) override
-    {
-        bool result{ false };
-        std::vector<AbilityInfo> abilityInfos;
-        if (BundleInfoQuery::QueryAbilityInfosByUrl(info.bundleName, info.url, abilityInfos)) {
-            result = !abilityInfos.empty();
-        }
-        return result;
-    }
-};
 
 class BundleAbilityFilterImpl : public AbilityFilter {
 public:
-    void SetBundleName(const std::string& bundleName) override
+    explicit BundleAbilityFilterImpl(std::string bundleName) : bundleName_(std::move(bundleName))
     {
-        this->bundleName_ = bundleName;
         Init();
     }
     bool Filter(const FilterInfo& info) override
     {
-        Want want;
-        want.SetUri(info.url);
-        want.AddEntity(ENTITY_BROWSER);
-        want.SetAction(ACTION_VIEW_DATA);
+        Want urlWant;
+        urlWant.SetUri(info.url);
+        urlWant.AddEntity(ENTITY_BROWSER);
+        urlWant.SetAction(ACTION_VIEW_DATA);
 
         auto matchedAbility = std::find_if(
-            abilityInfos_.begin(), abilityInfos_.end(), [&want](const AbilityInfo& abilityInfo) {
+            abilityInfos_.cbegin(), abilityInfos_.cend(), [&urlWant](const AbilityInfo& abilityInfo) {
                 APP_DOMAIN_VERIFY_HILOGD(
                     APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "abilityInfo:%{private}s", abilityInfo.name.c_str());
                 auto skills = abilityInfo.skills;
-                auto matchedSkill = std::find_if(skills.begin(), skills.end(), [&want](const Skill& skill) {
-                    APP_DOMAIN_VERIFY_HILOGD(
-                        APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "domainVerify:%{private}d", skill.domainVerify);
-                    if (skill.domainVerify && skill.Match(want)) {
+                auto matchedSkill = std::find_if(skills.cbegin(), skills.cend(), [&urlWant](const Skill& skill) {
+                    if (skill.domainVerify && skill.Match(urlWant)) {
                         APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "skill matched");
                         return true;
                     }
                     return false;
                 });
-                if (matchedSkill != skills.end()) {
-                    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "skill matched");
-                    return true;
-                }
-                return true;
+                return matchedSkill != skills.cend();
             });
-        if (matchedAbility != abilityInfos_.end()) {
-            APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "ability matched");
-            return true;
-        }
-        return false;
+
+        return matchedAbility != abilityInfos_.cend();
     }
     void Init()
     {
-        BundleInfoQuery::GetBundleInfosV9(bundleName_, abilityInfos_);
+        BundleInfoQuery::GetBundleAbilityInfos(bundleName_, abilityInfos_);
         APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "abilityInfos size:%zu", abilityInfos_.size());
     }
 
@@ -86,8 +61,8 @@ private:
     std::vector<AbilityInfo> abilityInfos_;
     std::string bundleName_;
 };
-std::shared_ptr<AbilityFilter> AbilityFilter::Create()
+std::shared_ptr<AbilityFilter> AbilityFilter::Create(const std::string& bundleName)
 {
-    return std::make_shared<BundleAbilityFilterImpl>();
+    return std::make_shared<BundleAbilityFilterImpl>(bundleName);
 }
 }
\ No newline at end of file
diff --git a/services/src/manager/deferred_link/deferred_link_mgr.cpp b/services/src/manager/deferred_link/deferred_link_mgr.cpp
index a951f5c..d982508 100644
--- a/services/src/manager/deferred_link/deferred_link_mgr.cpp
+++ b/services/src/manager/deferred_link/deferred_link_mgr.cpp
@@ -17,7 +17,7 @@
 namespace OHOS::AppDomainVerify {
 namespace {
 constexpr const char* TASK_ID = "age";
-constexpr int32_t DELAY_TIME = 60000;        // 1min
+constexpr int32_t DELAY_TIME = 60000;    // 1min
 constexpr int64_t MAX_CACHE_TIME = 600;  // 10min
 constexpr int MAX_CACHE_SIZE = 50;
 }
@@ -39,29 +39,29 @@ std::string DeferredLinkMgr::GetDeferredLink(const std::string& bundleName, cons
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
 
     std::set<std::string> domainSet(domains.begin(), domains.end());
-    std::unique_lock<std::mutex> lock(cachesMutex_);
+    auto filter = AbilityFilter::Create(bundleName);
     std::list<DeferredLinkInfo> destination;
-    // find links in bundle's domain and can match bundle's ability, then remove all of them.
-    caches_.remove_if([this, &bundleName, &domainSet, &destination](const DeferredLinkInfo& linkInfo) {
-        if (domainSet.count(linkInfo.domain) != 0 && CanMatchAbility(bundleName, linkInfo.url)) {
-            // keep newly in front
-            destination.push_back(linkInfo);
-            APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "matched.");
-            return true;
-        }
-        return false;
-    });
+
+    {
+        std::unique_lock<std::mutex> lock(cachesMutex_);
+
+        // find links in bundle's domain and can match bundle's ability, then remove all of them.
+        caches_.remove_if([filter, &domainSet, &destination](const DeferredLinkInfo& linkInfo) {
+            if (domainSet.count(linkInfo.domain) != 0 && filter->Filter({ .url = linkInfo.url })) {
+                // keep newly in front
+                destination.push_back(linkInfo);
+                APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "matched.");
+                return true;
+            }
+            return false;
+        });
+    }
 
     std::string result = destination.empty() ? "" : destination.front().url;
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "get deferred url:%{private}s", result.c_str());
     return result;
 }
 
-bool DeferredLinkMgr::CanMatchAbility(const std::string& bundleName, const std::string& url)
-{
-    abilityFilter_->SetBundleName(bundleName);
-    return abilityFilter_->Filter({ .bundleName = bundleName, .url = url });
-}
 void DeferredLinkMgr::PostAgeCacheTask()
 {
     if (ageHandler_) {
@@ -74,9 +74,7 @@ void DeferredLinkMgr::AgeCacheProcess()
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "age func in.");
     std::unique_lock<std::mutex> lock(cachesMutex_);
     int64_t now = GetSecondsSince1970ToNow();
-    caches_.remove_if([now](const DeferredLinkInfo& linkInfo) {
-        return now - linkInfo.timeStamp >= MAX_CACHE_TIME;
-    });
+    caches_.remove_if([now](const DeferredLinkInfo& linkInfo) { return now - linkInfo.timeStamp >= MAX_CACHE_TIME; });
     if (!caches_.empty()) {
         APP_DOMAIN_VERIFY_HILOGD(
             APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "post continue age task, remain size:%{public}zu.", caches_.size());
diff --git a/test/unittest/BUILD.gn b/test/unittest/BUILD.gn
index 6ac027c..39d6cb2 100644
--- a/test/unittest/BUILD.gn
+++ b/test/unittest/BUILD.gn
@@ -30,6 +30,7 @@ group("app_domain_verify_unit_test") {
     "frameworks_common/config_test:app_domain_verify_config_test",
     "frameworks_common/httpsession_test:app_domain_verify_httpsession_test",
     "moduletest:app_domain_verify_module_test",
+    "services/ability_filter_test:ability_filter_test",
     "services/app_domain_verify_agent_service_test:app_domain_verify_agent_service_test",
     "services/app_domain_verify_data_mgr_test:app_domain_verify_data_mgr_test",
     "services/app_domain_verify_mgr_service_test:app_domain_verify_mgr_service_test",
diff --git a/test/unittest/client/app_domain_verify_mgr_client_test/app_domain_verify_mgr_client_test.cpp b/test/unittest/client/app_domain_verify_mgr_client_test/app_domain_verify_mgr_client_test.cpp
index 8c7fd7b..d0a6cc8 100644
--- a/test/unittest/client/app_domain_verify_mgr_client_test/app_domain_verify_mgr_client_test.cpp
+++ b/test/unittest/client/app_domain_verify_mgr_client_test/app_domain_verify_mgr_client_test.cpp
@@ -289,6 +289,25 @@ HWTEST_F(AppDomainVerifyMgrClientTest, AppDomainVerifyMgrClientTest010, TestSize
     ASSERT_TRUE(g_mgrInvokeOK);
     AppDomainVerifyMgrClient::appDomainVerifyMgrServiceProxy_.ForceSetRefPtr(nullptr);
 }
+
+/**
+ * @tc.name: AppDomainVerifyMgrClientTest011
+ * @tc.desc: QueryAssociatedDomains test.
+ * @tc.type: FUNC
+ */
+HWTEST_F(AppDomainVerifyMgrClientTest, AppDomainVerifyMgrClientTest011, TestSize.Level0)
+{
+    std::shared_ptr<AppDomainVerifyMgrRemoteStubMock> mgrStubMock_ =
+        std::make_shared<AppDomainVerifyMgrRemoteStubMock>();
+    EXPECT_CALL(*mgrStubMock_, SendRequest(_, _, _, _)).Times(1).WillOnce(::testing::Invoke(MgrInvokeOK));
+    AppDomainVerifyMgrClient::appDomainVerifyMgrServiceProxy_ = sptr<AppDomainVerifyMgrServiceProxy>::MakeSptr(
+        mgrStubMock_.get());
+
+    std::string link;
+    AppDomainVerifyMgrClient::GetInstance()->GetDeferredLink(link);
+    ASSERT_TRUE(g_mgrInvokeOK);
+    AppDomainVerifyMgrClient::appDomainVerifyMgrServiceProxy_.ForceSetRefPtr(nullptr);
+}
 /**
  * @tc.name: AppDomainVerifyMgrSaDeathRecipientTest001
  * @tc.desc: VerifyDomain test.
diff --git a/test/unittest/frameworks_common/bms_test/BUILD.gn b/test/unittest/frameworks_common/bms_test/BUILD.gn
index 31d2ee9..e3164da 100644
--- a/test/unittest/frameworks_common/bms_test/BUILD.gn
+++ b/test/unittest/frameworks_common/bms_test/BUILD.gn
@@ -57,6 +57,10 @@ ohos_unittest("app_domain_verify_bms_test") {
   external_deps = [
     "ability_base:want",
     "ability_base:zuri",
+    "access_token:libaccesstoken_sdk",
+    "access_token:libnativetoken_shared",
+    "access_token:libtokenid_sdk",
+    "access_token:libtokensetproc_shared",
     "bundle_framework:appexecfwk_base",
     "bundle_framework:appexecfwk_core",
     "c_utils:utils",
diff --git a/test/unittest/frameworks_common/bms_test/bundle_info_query_test.cpp b/test/unittest/frameworks_common/bms_test/bundle_info_query_test.cpp
index 6a665be..8dd3c83 100644
--- a/test/unittest/frameworks_common/bms_test/bundle_info_query_test.cpp
+++ b/test/unittest/frameworks_common/bms_test/bundle_info_query_test.cpp
@@ -177,4 +177,19 @@ HWTEST_F(BundleInfoQueryTest, BundleInfoQueryTest008, TestSize.Level0)
     std::string fingerprint = FINGERPRINT;
     ASSERT_FALSE(BundleInfoQuery::GetBundleInfo(bundleName, appIdentifier, fingerprint));
 }
+
+/**
+ * @tc.name: BundleGetBundleNameForUidTest001
+ * @tc.desc: GetBundleName success.
+ * @tc.type: FUNC
+ */
+HWTEST_F(BundleInfoQueryTest, BundleGetBundleNameForUidTest001, TestSize.Level0)
+{
+    auto mocBundleMgrService = std::make_shared<OHOS::AppExecFwk::MocBundleMgrService>();
+    EXPECT_CALL(*mocBundleMgrService, GetBundleNameForUid(_, _)).WillOnce(Return(true));
+    g_mockBundleMgrService->impl = mocBundleMgrService;
+    int id = 0;
+    std::string bundleName;
+    ASSERT_TRUE(BundleInfoQuery::GetBundleNameForUid(id, bundleName));
+}
 }
\ No newline at end of file
diff --git a/test/unittest/mock/include/mock_bundle_manager.h b/test/unittest/mock/include/mock_bundle_manager.h
index 5219fcb..667fef8 100644
--- a/test/unittest/mock/include/mock_bundle_manager.h
+++ b/test/unittest/mock/include/mock_bundle_manager.h
@@ -35,6 +35,9 @@ public:
     }
     ErrCode GetBundleInfoV9(
         const std::string& bundleName, int32_t flags, BundleInfo& bundleInfo, int32_t userId) override;
+    bool GetBundleInfo(const std::string &bundleName, const BundleFlag flag,
+        BundleInfo &bundleInfo, int32_t userId = Constants::UNSPECIFIED_USERID) override;
+    bool GetBundleNameForUid(const int uid, std::string& bundleName) override;
 };
 
 class BundleMgrStub : public IRemoteStub<IBundleMgr> {
@@ -50,6 +53,9 @@ public:
 
     MOCK_METHOD(ErrCode, GetBundleInfoV9,
         (const std::string& bundleName, int32_t flags, BundleInfo& bundleInfo, int32_t userId), (override));
+    MOCK_METHOD(bool, GetBundleInfo,(const std::string &bundleName, const BundleFlag flag,
+        BundleInfo &bundleInfo, int32_t userId), (override));
+    MOCK_METHOD(bool, GetBundleNameForUid, (const int uid, std::string& bundleName), (override));
 };
 
 class BundleMgrService : public BundleMgrStub {
@@ -59,6 +65,9 @@ public:
 
     ErrCode GetBundleInfoV9(
         const std::string& bundleName, int32_t flags, BundleInfo& bundleInfo, int32_t userId) override;
+    bool GetBundleInfo(const std::string &bundleName, const BundleFlag flag,
+        BundleInfo &bundleInfo, int32_t userId = Constants::UNSPECIFIED_USERID) override;
+    bool GetBundleNameForUid(const int uid, std::string& bundleName) override;
     std::shared_ptr<MocBundleMgrService> impl = nullptr;
 };
 
diff --git a/test/unittest/mock/src/mock_bundle_manager.cpp b/test/unittest/mock/src/mock_bundle_manager.cpp
index e49ffcf..f1428ea 100644
--- a/test/unittest/mock/src/mock_bundle_manager.cpp
+++ b/test/unittest/mock/src/mock_bundle_manager.cpp
@@ -41,6 +41,25 @@ ErrCode BundleMgrService::GetBundleInfoV9(
     bundleInfo.signatureInfo.fingerprint = AppDomainVerify::FINGERPRINT;
     return ERR_OK;
 }
-
+bool BundleMgrService::GetBundleInfo(
+    const std::string& bundleName, const BundleFlag flag, BundleInfo& bundleInfo, int32_t userId)
+{
+    GTEST_LOG_(INFO) << "MOCK BundleMgrService GetBundleInfo";
+    if (impl != nullptr) {
+        GTEST_LOG_(INFO) << "MOCK BundleMgrService GetBundleInfo use mock";
+        return impl->GetBundleInfo(bundleName, flag, bundleInfo, userId);
+    }
+    bundleInfo.signatureInfo.fingerprint = AppDomainVerify::FINGERPRINT;
+    return true;
+}
+bool BundleMgrService::GetBundleNameForUid(const int uid, std::string& bundleName)
+{
+    GTEST_LOG_(INFO) << "MOCK BundleMgrService GetBundleNameForUid";
+    if (impl != nullptr) {
+        GTEST_LOG_(INFO) << "MOCK BundleMgrService GetBundleNameForUid use mock";
+        return impl->GetBundleNameForUid(uid, bundleName);
+    }
+    return true;
+}
 }  // namespace AppExecFwk
 }  // namespace OHOS
\ No newline at end of file
diff --git a/test/unittest/services/ability_filter_test/BUILD.gn b/test/unittest/services/ability_filter_test/BUILD.gn
new file mode 100644
index 0000000..27ce2eb
--- /dev/null
+++ b/test/unittest/services/ability_filter_test/BUILD.gn
@@ -0,0 +1,84 @@
+# Copyright (C) 2024 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/test.gni")
+import("//foundation/bundlemanager/app_domain_verify/app_domain_verify.gni")
+
+config("module_private_config") {
+  visibility = [ ":*" ]
+  configs = [ "//build/config/compiler:exceptions" ]
+  include_dirs = [
+    "${app_domain_verify_client_path}/include",
+    "${app_domain_verify_service_path}/include",
+    "${app_domain_verify_service_path}/include/agent/core",
+    "${app_domain_verify_service_path}/include/agent/zidl",
+    "${app_domain_verify_service_path}/include/manager/rdb",
+    "${app_domain_verify_service_path}/include/manager/core",
+    "${app_domain_verify_service_path}/include/manager/constant",
+    "${app_domain_verify_service_path}/include/manager/zidl",
+    "${app_domain_verify_service_path}/include/manager/permission",
+    "${app_domain_verify_service_path}/include/manager/deferred_link",
+    "${app_domain_verify_common_path}/include",
+    "${app_domain_verify_frameworks_common_path}/include",
+    "${app_domain_verify_frameworks_common_path}/include/utils",
+    "${app_domain_verify_frameworks_common_path}/include/bms",
+    "${app_domain_verify_frameworks_extension_path}/include",
+    "${app_domain_verify_test_path}/mock/include",
+    "${app_domain_verify_frameworks_common_path}/include/dfx",
+  ]
+}
+
+module_output_path = "app_domain_verify/app_domain_verify"
+ohos_unittest("ability_filter_test") {
+  module_out_path = module_output_path
+
+  sources = [
+    "${app_domain_verify_frameworks_common_path}/src/bms/bundle_info_query.cpp",
+    "${app_domain_verify_service_path}/src/manager/deferred_link/ability_filter.cpp",
+    "${app_domain_verify_test_path}/mock/src/mock_bundle_manager.cpp",
+    "${app_domain_verify_test_path}/mock/src/mock_os_account_manager.cpp",
+    "${app_domain_verify_test_path}/mock/src/mock_service_registry.cpp",
+    "${app_domain_verify_test_path}/mock/src/mock_system_ability.cpp",
+    "${app_domain_verify_test_path}/mock/src/mock_system_ability_ondemand_reason.cpp",
+    "ability_filter_test.cpp",
+  ]
+  configs = [ ":module_private_config" ]
+  external_deps = [
+    "ability_base:want",
+    "ability_base:zuri",
+    "access_token:libaccesstoken_sdk",
+    "access_token:libnativetoken_shared",
+    "access_token:libtokenid_sdk",
+    "access_token:libtokensetproc_shared",
+    "bundle_framework:appexecfwk_base",
+    "bundle_framework:appexecfwk_core",
+    "c_utils:utils",
+    "eventhandler:libeventhandler",
+    "ffrt:libffrt",
+    "hilog:libhilog",
+    "hisysevent:libhisysevent",
+    "image_framework:image_native",
+    "init:libbegetutil",
+    "ipc:ipc_core",
+    "netstack:http_client",
+    "os_account:os_account_innerkits",
+    "relational_store:native_rdb",
+    "samgr:samgr_proxy",
+  ]
+
+  defines = [ "API_EXPORT=__attribute__((visibility (\"default\")))" ]
+  deps = [
+    "//third_party/googletest:gmock_main",
+    "//third_party/googletest:gtest_main",
+  ]
+}
diff --git a/test/unittest/services/ability_filter_test/ability_filter_test.cpp b/test/unittest/services/ability_filter_test/ability_filter_test.cpp
new file mode 100644
index 0000000..30f29c5
--- /dev/null
+++ b/test/unittest/services/ability_filter_test/ability_filter_test.cpp
@@ -0,0 +1,206 @@
+/*
+ * Copyright (C) 2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "gtest/gtest.h"
+#include "mock_constant.h"
+#define private public
+#define protected public
+#include "ability_filter.h"
+#undef private
+#undef protected
+#include "bms/bundle_info_query.h"
+#include "mock_bundle_manager.h"
+#include "mock_system_ability.h"
+#include "mock_system_ability_registry.h"
+#include "mock_os_accout_manager.h"
+
+namespace OHOS::AppDomainVerify {
+using Want = OHOS::AAFwk::Want;
+using namespace OHOS::AppExecFwk;
+using namespace testing;
+using namespace testing::ext;
+constexpr const char* BUNDLE_NAME_WRONG = "BUNDLE_NAME_WRONG";
+constexpr const char* BUNDLE_DOMAIN = "https://www.openharmony.cn";
+constexpr const char* BUNDLE_DOMAIN_WRONG = "https://www.openharmony_wrong.cn";
+constexpr const char* BUNDLE_URL = "https://www.openharmony.cn/100";
+constexpr const char* BUNDLE_URL_NEW = "https://www.openharmony.cn/new";
+constexpr const char* TASK_ID = "age";
+constexpr int MAX_CACHE_SIZE = 50;
+class AbilityFilterTest : public testing::Test {
+public:
+    static void SetUpTestCase(void);
+    static void TearDownTestCase(void);
+    void SetUp();
+    void TearDown();
+};
+std::vector<AbilityInfo> g_mockAbilityInfos;
+void AbilityFilterTest::SetUpTestCase(void)
+{
+    GTEST_LOG_(INFO) << "SetUpTestCase";
+    OHOS::AccountSA::g_enableMockIds = true;
+    g_mockBundleMgrService = new AppExecFwk::BundleMgrService();
+}
+
+void AbilityFilterTest::TearDownTestCase(void)
+{
+    g_mockAbilityInfos.clear();
+}
+
+void AbilityFilterTest::SetUp(void)
+{
+}
+
+void AbilityFilterTest::TearDown(void)
+{
+    GTEST_LOG_(INFO) << "TearDown";
+    g_mockBundleMgrService->impl = nullptr;
+    OHOS::AccountSA::g_accountIds.clear();
+}
+
+bool InvokeGetBundleInfo(const std::string& bundleName, const BundleFlag flag, BundleInfo& bundleInfo, int32_t userId)
+{
+    bundleInfo.abilityInfos = g_mockAbilityInfos;
+    return true;
+}
+/**
+ * @tc.name: DeferredLinkPutTest001
+ * @tc.desc: filter success.
+ * @tc.type: FUNC
+ */
+HWTEST_F(AbilityFilterTest, AbilityFilterTest001, TestSize.Level0)
+{
+    std::vector<std::string> actions = { ACTION_VIEW_DATA };
+    std::vector<std::string> entities = { ENTITY_BROWSER };
+    std::vector<SkillUri> uris = { { .scheme = "https", .host = "www.openharmony.cn" } };
+    Skill skill;
+    skill.domainVerify = true;
+    skill.actions = actions;
+    skill.entities = entities;
+    skill.uris = uris;
+    std::vector<Skill> skills = { skill };
+    AbilityInfo abilityInfo;
+    abilityInfo.skills = skills;
+    g_mockAbilityInfos.push_back(abilityInfo);
+    auto mocBundleMgrService = std::make_shared<OHOS::AppExecFwk::MocBundleMgrService>();
+    EXPECT_CALL(*mocBundleMgrService, GetBundleInfo(_, _, _, _)).WillOnce(Invoke(InvokeGetBundleInfo));
+    g_mockBundleMgrService->impl = mocBundleMgrService;
+
+    auto filter = AbilityFilter::Create(BUNDLE_NAME);
+    EXPECT_TRUE(filter->Filter({ .url = BUNDLE_URL }));
+}
+//
+///**
+// * @tc.name: DeferredLinkPutTest002
+// * @tc.desc: filter with bms error.
+// * @tc.type: FUNC
+// */
+//HWTEST_F(AbilityFilterTest, AbilityFilterTest002, TestSize.Level0)
+//{
+//    auto mocBundleMgrService = std::make_shared<OHOS::AppExecFwk::MocBundleMgrService>();
+//    EXPECT_CALL(*mocBundleMgrService, GetBundleInfo(_, _, _, _)).WillOnce(Return(false));
+//    g_mockBundleMgrService->impl = mocBundleMgrService;
+//
+//    auto filter = AbilityFilter::Create(BUNDLE_NAME);
+//    EXPECT_FALSE(filter->Filter({ .url = BUNDLE_URL }));
+//}
+//
+///**
+// * @tc.name: DeferredLinkPutTest003
+// * @tc.desc: filter with no abilities.
+// * @tc.type: FUNC
+// */
+//HWTEST_F(AbilityFilterTest, DeferredLinkPutTest003, TestSize.Level0)
+//{
+//
+//    auto mocBundleMgrService = std::make_shared<OHOS::AppExecFwk::MocBundleMgrService>();
+//    EXPECT_CALL(*mocBundleMgrService, GetBundleInfo(_, _, _, _)).WillOnce(Return(true));
+//    g_mockBundleMgrService->impl = mocBundleMgrService;
+//
+//    auto filter = AbilityFilter::Create(BUNDLE_NAME);
+//    EXPECT_FALSE(filter->Filter({ .url = BUNDLE_URL }));
+//}
+//
+///**
+// * @tc.name: DeferredLinkPutTest004
+// * @tc.desc: filter with no skill.
+// * @tc.type: FUNC
+// */
+//HWTEST_F(AbilityFilterTest, DeferredLinkPutTest004, TestSize.Level0)
+//{
+//    std::vector<Skill> skills;
+//    AbilityInfo abilityInfo;
+//    abilityInfo.skills = skills;
+//    g_mockAbilityInfos.push_back(abilityInfo);
+//    auto mocBundleMgrService = std::make_shared<OHOS::AppExecFwk::MocBundleMgrService>();
+//    EXPECT_CALL(*mocBundleMgrService, GetBundleInfo(_, _, _, _)).WillOnce(Return(true));
+//    g_mockBundleMgrService->impl = mocBundleMgrService;
+//
+//    auto filter = AbilityFilter::Create(BUNDLE_NAME);
+//    EXPECT_FALSE(filter->Filter({ .url = BUNDLE_URL }));
+//}
+//
+///**
+// * @tc.name: DeferredLinkPutTest005
+// * @tc.desc: filter with no domainVerify skill.
+// * @tc.type: FUNC
+// */
+//HWTEST_F(AbilityFilterTest, DeferredLinkPutTest005, TestSize.Level0)
+//{
+//    std::vector<std::string> actions = { ACTION_VIEW_DATA };
+//    std::vector<std::string> entities = { ENTITY_BROWSER };
+//    std::vector<SkillUri> uris = { { .scheme = "https", .host = "www.openharmony.cn" } };
+//    Skill skill;
+//    skill.domainVerify = false;
+//    skill.actions = actions;
+//    skill.entities = entities;
+//    skill.uris = uris;
+//    std::vector<Skill> skills = { skill };
+//    AbilityInfo abilityInfo;
+//    abilityInfo.skills = skills;
+//    g_mockAbilityInfos.push_back(abilityInfo);
+//    auto mocBundleMgrService = std::make_shared<OHOS::AppExecFwk::MocBundleMgrService>();
+//    EXPECT_CALL(*mocBundleMgrService, GetBundleInfo(_, _, _, _)).WillOnce(Return(true));
+//    g_mockBundleMgrService->impl = mocBundleMgrService;
+//
+//    auto filter = AbilityFilter::Create(BUNDLE_NAME);
+//    EXPECT_FALSE(filter->Filter({ .url = BUNDLE_URL }));
+//}
+//
+///**
+// * @tc.name: DeferredLinkPutTest006
+// * @tc.desc: filter with no matched skill.
+// * @tc.type: FUNC
+// */
+//HWTEST_F(AbilityFilterTest, DeferredLinkPutTest006, TestSize.Level0)
+//{
+//    std::vector<std::string> actions = { ACTION_VIEW_DATA };
+//    std::vector<std::string> entities = { ENTITY_BROWSER };
+//    std::vector<SkillUri> uris = { { .scheme = "https", .host = "www.openharmony1.cn" } };
+//    Skill skill;
+//    skill.domainVerify = true;
+//    skill.actions = actions;
+//    skill.entities = entities;
+//    skill.uris = uris;
+//    std::vector<Skill> skills = { skill };
+//    AbilityInfo abilityInfo;
+//    abilityInfo.skills = skills;
+//    g_mockAbilityInfos.push_back(abilityInfo);
+//    auto mocBundleMgrService = std::make_shared<OHOS::AppExecFwk::MocBundleMgrService>();
+//    EXPECT_CALL(*mocBundleMgrService, GetBundleInfo(_, _, _, _)).WillOnce(Return(true));
+//    g_mockBundleMgrService->impl = mocBundleMgrService;
+//
+//    auto filter = AbilityFilter::Create(BUNDLE_NAME);
+//    EXPECT_FALSE(filter->Filter({ .url = BUNDLE_URL }));
+//}
+}
\ No newline at end of file
diff --git a/test/unittest/services/deferred_link_test/BUILD.gn b/test/unittest/services/deferred_link_test/BUILD.gn
index 50a8bc9..d11bcd7 100644
--- a/test/unittest/services/deferred_link_test/BUILD.gn
+++ b/test/unittest/services/deferred_link_test/BUILD.gn
@@ -44,10 +44,10 @@ ohos_unittest("deferred_link_test") {
 
   sources = [
     "${app_domain_verify_frameworks_common_path}/src/bms/bundle_info_query.cpp",
-    "${app_domain_verify_service_path}/src/manager/deferred_link/ability_filter.cpp",
     "${app_domain_verify_service_path}/src/manager/deferred_link/deferred_link_mgr.cpp",
     "${app_domain_verify_test_path}/mock/src/mock_bundle_manager.cpp",
     "deferred_link_mgr_test.cpp",
+    "mock_ability_filter.cpp",
   ]
   configs = [ ":module_private_config" ]
   external_deps = [
diff --git a/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
index fe81a2d..162aa59 100644
--- a/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
+++ b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
@@ -127,7 +127,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest001, TestSize.Level0)
     deferredLinkMgr.ageHandler_ = nullptr;
     std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
     EXPECT_CALL(*filter, Filter(_)).Times(1).WillOnce(Return(true));
-    deferredLinkMgr.abilityFilter_ = filter;
+    MockAbilityFilter(filter);
     deferredLinkMgr.PutDeferredLink(
         { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
     EXPECT_TRUE(deferredLinkMgr.caches_.size() == 1);
@@ -155,7 +155,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest002, TestSize.Level0)
     deferredLinkMgr.ageHandler_ = nullptr;
     std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
     EXPECT_CALL(*filter, Filter(_)).Times(0);
-    deferredLinkMgr.abilityFilter_ = filter;
+    MockAbilityFilter(filter);
     deferredLinkMgr.PutDeferredLink(
         { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
     EXPECT_TRUE(deferredLinkMgr.caches_.size() == 1);
@@ -179,7 +179,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest003, TestSize.Level0)
     deferredLinkMgr.ageHandler_ = nullptr;
     std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
     EXPECT_CALL(*filter, Filter(_)).Times(0);
-    deferredLinkMgr.abilityFilter_ = filter;
+    MockAbilityFilter(filter);
     deferredLinkMgr.PutDeferredLink(
         { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
     EXPECT_TRUE(deferredLinkMgr.caches_.size() == 1);
@@ -203,7 +203,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest004, TestSize.Level0)
     deferredLinkMgr.ageHandler_ = nullptr;
     std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
     EXPECT_CALL(*filter, Filter(_)).Times(1).WillOnce(Return(false));
-    deferredLinkMgr.abilityFilter_ = filter;
+    MockAbilityFilter(filter);
     deferredLinkMgr.PutDeferredLink(
         { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
     EXPECT_TRUE(deferredLinkMgr.caches_.size() == 1);
@@ -227,7 +227,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest005, TestSize.Level0)
     deferredLinkMgr.ageHandler_ = nullptr;
     std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
     EXPECT_CALL(*filter, Filter(_)).Times(2).WillRepeatedly(Return(true));
-    deferredLinkMgr.abilityFilter_ = filter;
+    MockAbilityFilter(filter);
     deferredLinkMgr.PutDeferredLink(
         { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
     deferredLinkMgr.PutDeferredLink(
@@ -256,7 +256,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest006, TestSize.Level0)
     DeferredLinkMgr deferredLinkMgr;
     deferredLinkMgr.ageHandler_ = nullptr;
     std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
-    deferredLinkMgr.abilityFilter_ = filter;
+    MockAbilityFilter(filter);
 
     std::vector<std::string> domains;
     domains.emplace_back(BUNDLE_DOMAIN);
diff --git a/test/unittest/services/deferred_link_test/mock_ability_filter.cpp b/test/unittest/services/deferred_link_test/mock_ability_filter.cpp
new file mode 100644
index 0000000..2363a4f
--- /dev/null
+++ b/test/unittest/services/deferred_link_test/mock_ability_filter.cpp
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "mock_ability_filter.h"
+
+#include <utility>
+
+namespace OHOS::AppDomainVerify {
+std::shared_ptr<AbilityFilter> g_mockAbilityFilter = nullptr;
+void MockAbilityFilter(std::shared_ptr<AbilityFilter> mockAbilityFilter)
+{
+    g_mockAbilityFilter = std::move(mockAbilityFilter);
+}
+std::shared_ptr<AbilityFilter> AbilityFilter::Create(const std::string& bundleName)
+{
+    return g_mockAbilityFilter;
+}
+}
\ No newline at end of file
diff --git a/test/unittest/services/deferred_link_test/mock_ability_filter.h b/test/unittest/services/deferred_link_test/mock_ability_filter.h
index db46f0a..9819965 100644
--- a/test/unittest/services/deferred_link_test/mock_ability_filter.h
+++ b/test/unittest/services/deferred_link_test/mock_ability_filter.h
@@ -18,10 +18,10 @@
 #include "ability_filter.h"
 #include <gmock/gmock.h>
 namespace OHOS::AppDomainVerify {
+void MockAbilityFilter(std::shared_ptr<AbilityFilter> mockAbilityFilter);
 class MocAbilityFilter : public AbilityFilter {
 public:
     MOCK_METHOD(bool, Filter, (const FilterInfo& info), (override));
-    MOCK_METHOD(void, SetBundleName, (const std::string& bundleName), (override));
 };
 }
 #endif  // APP_DOMAIN_VERIFY_MOCK_ABILITY_FILTER_H
-- 
2.25.1


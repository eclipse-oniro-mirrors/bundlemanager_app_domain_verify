From 215559f2b219ca5b957f3b0584d4fde381a80e36 Mon Sep 17 00:00:00 2001
From: woohoa <wanghuan36@huawei.com>
Date: Thu, 31 Oct 2024 11:45:42 +0800
Subject: [PATCH] support deferred link opt ipc with bms

Change-Id: I858b50415d2ff8dd73ce06e5d4cd9227596971df
---
 .../common/include/bms/bundle_info_query.h    |  7 ++-
 .../common/src/bms/bundle_info_query.cpp      | 37 +++++------
 .../manager/deferred_link/ability_filter.h    |  1 +
 .../manager/deferred_link/deferred_link_mgr.h |  2 +-
 .../manager/deferred_link/ability_filter.cpp  | 61 ++++++++++++++++++-
 .../deferred_link/deferred_link_mgr.cpp       |  5 +-
 .../services/deferred_link_test/BUILD.gn      |  1 +
 .../deferred_link_test/mock_ability_filter.h  | 30 ++++-----
 8 files changed, 104 insertions(+), 40 deletions(-)

diff --git a/frameworks/common/include/bms/bundle_info_query.h b/frameworks/common/include/bms/bundle_info_query.h
index 4ad898f..f8ed716 100644
--- a/frameworks/common/include/bms/bundle_info_query.h
+++ b/frameworks/common/include/bms/bundle_info_query.h
@@ -21,6 +21,8 @@ namespace OHOS {
 namespace AppDomainVerify {
 using Want = OHOS::AAFwk::Want;
 using AbilityInfo = OHOS::AppExecFwk::AbilityInfo;
+constexpr const char* ACTION_VIEW_DATA = "ohos.want.action.viewData";
+constexpr const char* ENTITY_BROWSER = "entity.system.browsable";
 class BundleInfoQuery {
 
 public:
@@ -28,12 +30,13 @@ public:
     static bool GetBundleNameForUid(const int uid, std::string& bundleName);
     static bool QueryAbilityInfosByUrl(
         const std::string& bundleName, const std::string& url, std::vector<AbilityInfo>& abilityInfos);
-    static bool GetBundleNameSelf(std::string& bundleName);
+    static bool GetBundleInfosV9(const std::string& bundleName, std::vector<AbilityInfo>& abilityInfos);
+
 private:
     static sptr<AppExecFwk::IBundleMgr> GetBundleMgrProxy();
     static int32_t GetCurrentAccountId();
     BundleInfoQuery(){};
-    ~BundleInfoQuery(){};
+    ~BundleInfoQuery() = default;
 };
 }
 }
diff --git a/frameworks/common/src/bms/bundle_info_query.cpp b/frameworks/common/src/bms/bundle_info_query.cpp
index 0e10a04..d6d03f9 100644
--- a/frameworks/common/src/bms/bundle_info_query.cpp
+++ b/frameworks/common/src/bms/bundle_info_query.cpp
@@ -23,8 +23,6 @@
 
 namespace OHOS {
 namespace AppDomainVerify {
-constexpr const char* ACTION_VIEW_DATA = "ohos.want.action.viewData";
-constexpr const char* ENTITY_BROWSER = "entity.system.browsable";
 constexpr int USER_ID_DEFAULT = 100;
 bool BundleInfoQuery::GetBundleInfo(const std::string& bundleName, std::string& appIdentifier, std::string& fingerprint)
 {
@@ -117,7 +115,9 @@ bool BundleInfoQuery::GetBundleNameForUid(const int uid, std::string& bundleName
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
     return true;
 }
-bool BundleInfoQuery::GetBundleNameSelf(std::string& bundleName)
+
+bool BundleInfoQuery::QueryAbilityInfosByUrl(
+    const std::string& bundleName, const std::string& url, std::vector<AbilityInfo>& abilityInfos)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
     sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
@@ -127,19 +127,25 @@ bool BundleInfoQuery::GetBundleNameSelf(std::string& bundleName)
         UNIVERSAL_ERROR_EVENT(CONNECT_OTHER_FAULT);
         return false;
     }
+    Want want;
+    //    want.SetBundle(bundleName);
+    want.SetUri(url);
+    want.AddEntity(ENTITY_BROWSER);
+    want.SetAction(ACTION_VIEW_DATA);
 
-    OHOS::AppExecFwk::BundleInfo bundleInfo;
-    auto ret = bundleMgrProxy->GetBundleInfoForSelf(0, bundleInfo);
+    // use sa identity
+    std::string identity = IPCSkeleton::ResetCallingIdentity();
+    auto ret = bundleMgrProxy->QueryAbilityInfosV9(
+        want, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, USER_ID_DEFAULT, abilityInfos);
+    IPCSkeleton::SetCallingIdentity(identity);
     if (ret != ERR_OK) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
+        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
         return false;
     }
-    bundleName = bundleInfo.name;
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
     return true;
 }
-bool BundleInfoQuery::QueryAbilityInfosByUrl(
-    const std::string& bundleName, const std::string& url, std::vector<AbilityInfo>& abilityInfos)
+bool BundleInfoQuery::GetBundleInfosV9(const std::string& bundleName, std::vector<AbilityInfo>& abilityInfos)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
     sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
@@ -149,16 +155,12 @@ bool BundleInfoQuery::QueryAbilityInfosByUrl(
         UNIVERSAL_ERROR_EVENT(CONNECT_OTHER_FAULT);
         return false;
     }
-    Want want;
-    want.SetBundle(bundleName);
-    want.SetUri(url);
-    want.AddEntity(ENTITY_BROWSER);
-    want.SetAction(ACTION_VIEW_DATA);
 
+    AppExecFwk::BundleInfo bundleInfo;
     // use sa identity
     std::string identity = IPCSkeleton::ResetCallingIdentity();
-    auto ret = bundleMgrProxy->QueryAbilityInfosV9(
-        want, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, USER_ID_DEFAULT, abilityInfos);
+    auto ret = bundleMgrProxy->GetBundleInfoV9(
+        bundleName, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, bundleInfo, USER_ID_DEFAULT);
     IPCSkeleton::SetCallingIdentity(identity);
     if (ret != ERR_OK) {
         APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
@@ -166,7 +168,6 @@ bool BundleInfoQuery::QueryAbilityInfosByUrl(
     }
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
     return true;
-}
-
+};
 }
 }
\ No newline at end of file
diff --git a/services/include/manager/deferred_link/ability_filter.h b/services/include/manager/deferred_link/ability_filter.h
index 7857f1e..79cafb0 100644
--- a/services/include/manager/deferred_link/ability_filter.h
+++ b/services/include/manager/deferred_link/ability_filter.h
@@ -33,6 +33,7 @@ public:
      * @return bool return true if can match abilities else false.
      */
     virtual bool Filter(const FilterInfo& info) = 0;
+    virtual void SetBundleName(const std::string& bundleName);
     virtual ~AbilityFilter() = default;
     static std::shared_ptr<AbilityFilter> Create();
 };
diff --git a/services/include/manager/deferred_link/deferred_link_mgr.h b/services/include/manager/deferred_link/deferred_link_mgr.h
index 5d24953..a6869d5 100644
--- a/services/include/manager/deferred_link/deferred_link_mgr.h
+++ b/services/include/manager/deferred_link/deferred_link_mgr.h
@@ -64,7 +64,7 @@ private:
     void PostAgeCacheTask();
     void AgeCacheProcess();
     void CheckStartTimerUnlocked();
-    void CheckFullUnlocked(const DeferredLinkInfo& info);
+    void CheckFullUnlocked();
     void CheckRemoveExistedUnlocked(const DeferredLinkInfo& info);
     /**
      * cache list
diff --git a/services/src/manager/deferred_link/ability_filter.cpp b/services/src/manager/deferred_link/ability_filter.cpp
index 0f2cbbe..3b7bef7 100644
--- a/services/src/manager/deferred_link/ability_filter.cpp
+++ b/services/src/manager/deferred_link/ability_filter.cpp
@@ -12,13 +12,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+#include <string>
 #include "ability_filter.h"
 #include "bundle_info_query.h"
+#include "app_domain_verify_hilog.h"
 
 namespace OHOS::AppDomainVerify {
-
+using Skill = OHOS::AppExecFwk::Skill;
 class AbilityFilterImpl : public AbilityFilter {
 public:
+    void SetBundleName(const std::string& bundleName) override
+    {
+        AbilityFilter::SetBundleName(bundleName);
+    }
     bool Filter(const FilterInfo& info) override
     {
         bool result{ false };
@@ -29,8 +35,59 @@ public:
         return result;
     }
 };
+
+class BundleAbilityFilterImpl : public AbilityFilter {
+public:
+    void SetBundleName(const std::string& bundleName) override
+    {
+        this->bundleName_ = bundleName;
+        Init();
+    }
+    bool Filter(const FilterInfo& info) override
+    {
+        Want want;
+        want.SetUri(info.url);
+        want.AddEntity(ENTITY_BROWSER);
+        want.SetAction(ACTION_VIEW_DATA);
+
+        auto matchedAbility = std::find_if(
+            abilityInfos_.begin(), abilityInfos_.end(), [&want](const AbilityInfo& abilityInfo) {
+                APP_DOMAIN_VERIFY_HILOGD(
+                    APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "abilityInfo:%{private}s", abilityInfo.name.c_str());
+                auto skills = abilityInfo.skills;
+                auto matchedSkill = std::find_if(skills.begin(), skills.end(), [&want](const Skill& skill) {
+                    APP_DOMAIN_VERIFY_HILOGD(
+                        APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "domainVerify:%{private}d", skill.domainVerify);
+                    if (skill.domainVerify && skill.Match(want)) {
+                        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "skill matched");
+                        return true;
+                    }
+                    return false;
+                });
+                if (matchedSkill != skills.end()) {
+                    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "skill matched");
+                    return true;
+                }
+                return true;
+            });
+        if (matchedAbility != abilityInfos_.end()) {
+            APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "ability matched");
+            return true;
+        }
+        return false;
+    }
+    void Init()
+    {
+        BundleInfoQuery::GetBundleInfosV9(bundleName_, abilityInfos_);
+        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "abilityInfos size:%zu", abilityInfos_.size());
+    }
+
+private:
+    std::vector<AbilityInfo> abilityInfos_;
+    std::string bundleName_;
+};
 std::shared_ptr<AbilityFilter> AbilityFilter::Create()
 {
-    return std::make_shared<AbilityFilterImpl>();
+    return std::make_shared<BundleAbilityFilterImpl>();
 }
 }
\ No newline at end of file
diff --git a/services/src/manager/deferred_link/deferred_link_mgr.cpp b/services/src/manager/deferred_link/deferred_link_mgr.cpp
index bcd3aae..a951f5c 100644
--- a/services/src/manager/deferred_link/deferred_link_mgr.cpp
+++ b/services/src/manager/deferred_link/deferred_link_mgr.cpp
@@ -27,7 +27,7 @@ void DeferredLinkMgr::PutDeferredLink(const DeferredLinkInfo& info)
     std::unique_lock<std::mutex> lock(cachesMutex_);
     CheckStartTimerUnlocked();
     CheckRemoveExistedUnlocked(info);
-    CheckFullUnlocked(info);
+    CheckFullUnlocked();
 
     caches_.push_front(info);
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "info domain:%{private}s, url:%{private}s.",
@@ -59,6 +59,7 @@ std::string DeferredLinkMgr::GetDeferredLink(const std::string& bundleName, cons
 
 bool DeferredLinkMgr::CanMatchAbility(const std::string& bundleName, const std::string& url)
 {
+    abilityFilter_->SetBundleName(bundleName);
     return abilityFilter_->Filter({ .bundleName = bundleName, .url = url });
 }
 void DeferredLinkMgr::PostAgeCacheTask()
@@ -90,7 +91,7 @@ void DeferredLinkMgr::CheckStartTimerUnlocked()
         PostAgeCacheTask();
     }
 }
-void DeferredLinkMgr::CheckFullUnlocked(const DeferredLinkInfo& info)
+void DeferredLinkMgr::CheckFullUnlocked()
 {
     if (caches_.size() == MAX_CACHE_SIZE) {
         caches_.pop_back();
diff --git a/test/unittest/services/deferred_link_test/BUILD.gn b/test/unittest/services/deferred_link_test/BUILD.gn
index 30375ef..50a8bc9 100644
--- a/test/unittest/services/deferred_link_test/BUILD.gn
+++ b/test/unittest/services/deferred_link_test/BUILD.gn
@@ -43,6 +43,7 @@ ohos_unittest("deferred_link_test") {
   module_out_path = module_output_path
 
   sources = [
+    "${app_domain_verify_frameworks_common_path}/src/bms/bundle_info_query.cpp",
     "${app_domain_verify_service_path}/src/manager/deferred_link/ability_filter.cpp",
     "${app_domain_verify_service_path}/src/manager/deferred_link/deferred_link_mgr.cpp",
     "${app_domain_verify_test_path}/mock/src/mock_bundle_manager.cpp",
diff --git a/test/unittest/services/deferred_link_test/mock_ability_filter.h b/test/unittest/services/deferred_link_test/mock_ability_filter.h
index 3a9693d..db46f0a 100644
--- a/test/unittest/services/deferred_link_test/mock_ability_filter.h
+++ b/test/unittest/services/deferred_link_test/mock_ability_filter.h
@@ -1,17 +1,17 @@
 /*
-* Copyright (C) 2024 Huawei Device Co., Ltd.
-* Licensed under the Apache License, Version 2.0 (the "License");
-* you may not use this file except in compliance with the License.
-* You may obtain a copy of the License at
-*
-*     http://www.apache.org/licenses/LICENSE-2.0
-*
-* Unless required by applicable law or agreed to in writing, software
-* distributed under the License is distributed on an "AS IS" BASIS,
-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-* See the License for the specific language governing permissions and
-* limitations under the License.
-*/
+ * Copyright (C) 2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
 #ifndef APP_DOMAIN_VERIFY_MOCK_ABILITY_FILTER_H
 #define APP_DOMAIN_VERIFY_MOCK_ABILITY_FILTER_H
@@ -20,8 +20,8 @@
 namespace OHOS::AppDomainVerify {
 class MocAbilityFilter : public AbilityFilter {
 public:
-    MOCK_METHOD(bool, Filter, (const FilterInfo& info),
-        (override));
+    MOCK_METHOD(bool, Filter, (const FilterInfo& info), (override));
+    MOCK_METHOD(void, SetBundleName, (const std::string& bundleName), (override));
 };
 }
 #endif  // APP_DOMAIN_VERIFY_MOCK_ABILITY_FILTER_H
-- 
2.25.1


From cde26899644bbea87405cec843057114dfe71c00 Mon Sep 17 00:00:00 2001
From: woohoa <wanghuan36@huawei.com>
Date: Mon, 28 Oct 2024 16:52:45 +0800
Subject: [PATCH] support deferred link remove batch urls

Change-Id: I365f97415ec72388d21993419b1673142709a779
---
 .../manager/deferred_link/deferred_link_mgr.h |  4 +-
 .../deferred_link/deferred_link_mgr.cpp       | 59 ++++++++++---------
 .../deferred_link_mgr_test.cpp                | 22 ++++---
 3 files changed, 47 insertions(+), 38 deletions(-)

diff --git a/services/include/manager/deferred_link/deferred_link_mgr.h b/services/include/manager/deferred_link/deferred_link_mgr.h
index 77a4c63..5d59a53 100644
--- a/services/include/manager/deferred_link/deferred_link_mgr.h
+++ b/services/include/manager/deferred_link/deferred_link_mgr.h
@@ -61,11 +61,11 @@ public:
 
 private:
     bool CanMatchAbility(const std::string& bundleName, const std::string& url);
-    void PostAgeTask();
+    void PostAgeCacheTask();
     void AgeCacheProcess();
     void CheckStartTimerUnlocked();
     void CheckFullUnlocked(const DeferredLinkInfo& info);
-    void CheckExistedUnlocked(const DeferredLinkInfo& info);
+    void CheckRemoveExistedUnlocked(const DeferredLinkInfo& info);
     /**
      * cache list
      * @descrition list contains deferred link info, newly in front, older in back.
diff --git a/services/src/manager/deferred_link/deferred_link_mgr.cpp b/services/src/manager/deferred_link/deferred_link_mgr.cpp
index 668416b..2192f9b 100644
--- a/services/src/manager/deferred_link/deferred_link_mgr.cpp
+++ b/services/src/manager/deferred_link/deferred_link_mgr.cpp
@@ -17,20 +17,19 @@
 namespace OHOS::AppDomainVerify {
 namespace {
 constexpr const char* TASK_ID = "age";
-constexpr int32_t DELAY_TIME = 120000;       // 2min
-constexpr int64_t MAX_CACHE_TIME = 1200000;  // 10min
+constexpr int32_t DELAY_TIME = 60000;        // 1min
+constexpr int64_t MAX_CACHE_TIME = 600;  // 10min
 constexpr int MAX_CACHE_SIZE = 50;
 }
 void DeferredLinkMgr::PutDeferredLink(const DeferredLinkInfo& info)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
     std::unique_lock<std::mutex> lock(cachesMutex_);
-    CheckExistedUnlocked(info);
+    CheckStartTimerUnlocked();
+    CheckRemoveExistedUnlocked(info);
     CheckFullUnlocked(info);
 
     caches.push_front(info);
-
-    CheckStartTimerUnlocked();
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "info domain:%{private}s, url:%{private}s.",
         info.domain.c_str(), info.url.c_str());
 }
@@ -38,24 +37,22 @@ void DeferredLinkMgr::PutDeferredLink(const DeferredLinkInfo& info)
 std::string DeferredLinkMgr::GetDeferredLink(const std::string& bundleName, const std::vector<std::string>& domains)
 {
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
-    std::string result;
+
     std::set<std::string> domainSet(domains.begin(), domains.end());
     std::unique_lock<std::mutex> lock(cachesMutex_);
-    auto target = std::find_if(
-        caches.cbegin(), caches.cend(), [this, &bundleName, &domainSet](const DeferredLinkInfo& linkInfo) {
-            if (domainSet.count(linkInfo.domain) != 0 && CanMatchAbility(bundleName, linkInfo.url)) {
-                APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "matched.");
-                return true;
-            }
-            return false;
-        });
-    if (target != caches.cend()) {
-        result = target->url;
-        caches.erase(target);
-        APP_DOMAIN_VERIFY_HILOGD(
-            APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "erase after get url:%{private}s", result.c_str());
-        return result;
-    }
+    std::list<DeferredLinkInfo> destination;
+    // find links in bundle's domain and can match bundle's ability, then remove all of them.
+    caches.remove_if([this, &bundleName, &domainSet, &destination](const DeferredLinkInfo& linkInfo) {
+        if (domainSet.count(linkInfo.domain) != 0 && CanMatchAbility(bundleName, linkInfo.url)) {
+            // keep newly in front
+            destination.push_back(linkInfo);
+            APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "matched.");
+            return true;
+        }
+        return false;
+    });
+
+    std::string result = destination.empty() ? "" : destination.front().url;
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "get deferred url:%{private}s", result.c_str());
     return result;
 }
@@ -64,9 +61,10 @@ bool DeferredLinkMgr::CanMatchAbility(const std::string& bundleName, const std::
 {
     return abilityFilter_->Filter({ .bundleName = bundleName, .url = url });
 }
-void DeferredLinkMgr::PostAgeTask()
+void DeferredLinkMgr::PostAgeCacheTask()
 {
     if (ageHandler_) {
+        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "PostAgeCacheTask.");
         ageHandler_->PostTask([this] { AgeCacheProcess(); }, TASK_ID, DELAY_TIME);
     }
 }
@@ -75,18 +73,23 @@ void DeferredLinkMgr::AgeCacheProcess()
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "age func in.");
     std::unique_lock<std::mutex> lock(cachesMutex_);
     int64_t now = GetSecondsSince1970ToNow();
-    caches.remove_if([now](const DeferredLinkInfo& linkInfo) { return now - linkInfo.timeStamp >= MAX_CACHE_TIME; });
+    caches.remove_if([now](const DeferredLinkInfo& linkInfo) {
+        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE,
+            "url:%{public}s, now:%{public}lld, timestamp%{public}lld.", linkInfo.url.c_str(), now, linkInfo.timeStamp);
+        return now - linkInfo.timeStamp >= MAX_CACHE_TIME;
+    });
     if (!caches.empty()) {
-        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "post continue age task.");
-        PostAgeTask();
+        APP_DOMAIN_VERIFY_HILOGD(
+            APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "post continue age task, remain size:%{public}zu.", caches.size());
+        PostAgeCacheTask();
     } else {
         APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "age task end.");
     }
 }
 void DeferredLinkMgr::CheckStartTimerUnlocked()
 {
-    if (caches.size() == 1) {
-        PostAgeTask();
+    if (caches.empty()) {
+        PostAgeCacheTask();
     }
 }
 void DeferredLinkMgr::CheckFullUnlocked(const DeferredLinkInfo& info)
@@ -95,7 +98,7 @@ void DeferredLinkMgr::CheckFullUnlocked(const DeferredLinkInfo& info)
         caches.pop_back();
     }
 }
-void DeferredLinkMgr::CheckExistedUnlocked(const DeferredLinkInfo& info)
+void DeferredLinkMgr::CheckRemoveExistedUnlocked(const DeferredLinkInfo& info)
 {
     caches.remove_if([&info](const DeferredLinkInfo& curInfo) {
         if (curInfo.url == info.url && curInfo.domain == info.domain) {
diff --git a/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
index 26e1ca5..42eeac6 100644
--- a/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
+++ b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
@@ -217,7 +217,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest004, TestSize.Level0)
 
 /**
  * @tc.name: DeferredLinkGetTest005
- * @tc.desc: get link with matched domain and matched url, return back link.
+ * @tc.desc: get link with matched domain and matched url, return new link, cache remove link all.
  * @tc.type: FUNC
  */
 HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest005, TestSize.Level0)
@@ -225,7 +225,7 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest005, TestSize.Level0)
     DeferredLinkMgr deferredLinkMgr;
     deferredLinkMgr.ageHandler_ = nullptr;
     std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
-    EXPECT_CALL(*filter, Filter(_)).Times(1).WillOnce(Return(true));
+    EXPECT_CALL(*filter, Filter(_)).Times(2).WillRepeatedly(Return(true));
     deferredLinkMgr.abilityFilter_ = filter;
     deferredLinkMgr.PutDeferredLink(
         { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
@@ -239,20 +239,26 @@ HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest005, TestSize.Level0)
 
     EXPECT_FALSE(link.empty());
     EXPECT_EQ(link, BUNDLE_URL_NEW);
-    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+    EXPECT_TRUE(deferredLinkMgr.caches.empty());
 }
 
 /**
- * @tc.name: DeferredLinkAgeTest001
- * @tc.desc: put one , will trigger age task after time count.
+ * @tc.name: DeferredLinkGetTest006
+ * @tc.desc: get link from empty cache, return null.
  * @tc.type: FUNC
  */
-HWTEST_F(DeferredLinkMgrTest, DeferredLinkAgeTest001, TestSize.Level0)
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest006, TestSize.Level0)
 {
     DeferredLinkMgr deferredLinkMgr;
     deferredLinkMgr.ageHandler_ = nullptr;
+    std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
+    deferredLinkMgr.abilityFilter_ = filter;
 
-    deferredLinkMgr.PutDeferredLink(
-        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    std::vector<std::string> domains;
+    domains.emplace_back(BUNDLE_DOMAIN);
+    auto link = deferredLinkMgr.GetDeferredLink(BUNDLE_NAME, domains);
+
+    EXPECT_TRUE(link.empty());
 }
+
 }
\ No newline at end of file
-- 
2.25.1


From 870a28c2afabfd9980f9800e834e6ec3896cf80f Mon Sep 17 00:00:00 2001
From: woohoa <wanghuan36@huawei.com>
Date: Thu, 24 Oct 2024 14:59:58 +0800
Subject: [PATCH] support deferred link

Change-Id: I82f249121dd3a515a67f5f3f219775275b085496
---
 .../common/include/bms/bundle_info_query.h    |  8 +-
 .../common/src/bms/bundle_info_query.cpp      | 99 +++++++++++++++----
 interfaces/inner_api/client/BUILD.gn          |  4 +
 .../include/app_domain_verify_mgr_client.h    |  8 ++
 .../src/app_domain_verify_agent_client.cpp    |  4 +-
 .../src/app_domain_verify_mgr_client.cpp      | 32 +++++-
 .../js/src/app_domain_verify_manager_napi.cpp |  1 +
 services/BUILD.gn                             |  5 +
 .../manager/core/app_domain_verify_data_mgr.h |  4 +-
 .../app_domain_verify_mgr_interface_code.h    |  3 +-
 .../core/app_domain_verify_mgr_service.h      |  7 +-
 .../core/i_app_domain_verify_mgr_service.h    |  3 +-
 .../manager/deferred_link/deferred_link_mgr.h | 60 +++++++++++
 .../app_domain_verify_mgr_service_proxy.h     | 27 ++---
 .../zidl/app_domain_verify_mgr_service_stub.h |  3 +-
 .../core/app_domain_verify_mgr_service.cpp    | 38 +++++--
 .../deferred_link/deferred_link_mgr.cpp       | 95 ++++++++++++++++++
 .../app_domain_verify_mgr_service_proxy.cpp   | 28 +++++-
 .../app_domain_verify_mgr_service_stub.cpp    | 16 +++
 .../deferred_link_mgr_test.cpp                | 61 ++++++++++++
 20 files changed, 452 insertions(+), 54 deletions(-)
 create mode 100644 services/include/manager/deferred_link/deferred_link_mgr.h
 create mode 100644 services/src/manager/deferred_link/deferred_link_mgr.cpp
 create mode 100644 test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp

diff --git a/frameworks/common/include/bms/bundle_info_query.h b/frameworks/common/include/bms/bundle_info_query.h
index 780a158..862a9a1 100644
--- a/frameworks/common/include/bms/bundle_info_query.h
+++ b/frameworks/common/include/bms/bundle_info_query.h
@@ -19,11 +19,15 @@
 
 namespace OHOS {
 namespace AppDomainVerify {
+using Want = OHOS::AAFwk::Want;
+using AbilityInfo = OHOS::AppExecFwk::AbilityInfo;
 class BundleInfoQuery {
 
 public:
-    static bool GetBundleInfo(const std::string &bundleName, std::string &appIdentifier, std::string &fingerprint);
-
+    static bool GetBundleInfo(const std::string& bundleName, std::string& appIdentifier, std::string& fingerprint);
+    static bool GetBundleNameForUid(const int uid, std::string& bundleName);
+    static bool QueryAbilityInfosByUrl(const std::string& url, std::vector<AbilityInfo>& abilityInfos);
+    static bool GetBundleNameSelf(std::string& bundleName);
 private:
     static sptr<AppExecFwk::IBundleMgr> GetBundleMgrProxy();
     static int32_t GetCurrentAccountId();
diff --git a/frameworks/common/src/bms/bundle_info_query.cpp b/frameworks/common/src/bms/bundle_info_query.cpp
index 667d15c..394064c 100644
--- a/frameworks/common/src/bms/bundle_info_query.cpp
+++ b/frameworks/common/src/bms/bundle_info_query.cpp
@@ -22,13 +22,14 @@
 
 namespace OHOS {
 namespace AppDomainVerify {
-bool BundleInfoQuery::GetBundleInfo(const std::string &bundleName, std::string &appIdentifier, std::string &fingerprint)
+
+bool BundleInfoQuery::GetBundleInfo(const std::string& bundleName, std::string& appIdentifier, std::string& fingerprint)
 {
-    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "called");
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
     sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
 
     if (bundleMgrProxy == nullptr) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "bundleMgrProxy is nullptr.");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "bundleMgrProxy is nullptr.");
         UNIVERSAL_ERROR_EVENT(CONNECT_OTHER_FAULT);
         return false;
     }
@@ -40,58 +41,120 @@ bool BundleInfoQuery::GetBundleInfo(const std::string &bundleName, std::string &
     auto ret = bundleMgrProxy->GetBundleInfoV9(bundleName,
         static_cast<int32_t>(AppExecFwk::GetBundleInfoFlag::GET_BUNDLE_INFO_WITH_SIGNATURE_INFO), bundleInfo, userId);
     if (ret != ERR_OK) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "GetBundleInfo failed, ret: %{public}d.", ret);
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
         return false;
     }
     appIdentifier = bundleInfo.signatureInfo.appIdentifier;
     fingerprint = bundleInfo.signatureInfo.fingerprint;
-    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "call end");
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
     return true;
 }
 
 sptr<AppExecFwk::IBundleMgr> BundleInfoQuery::GetBundleMgrProxy()
 {
-    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "called");
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
     sptr<ISystemAbilityManager> systemAbilityManager =
         SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
     if (!systemAbilityManager) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE,
-            "GetBundleMgrProxy, systemAbilityManager is null");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleMgrProxy, systemAbilityManager is null");
         return nullptr;
     }
     sptr<IRemoteObject> remoteObject = systemAbilityManager->GetSystemAbility(BUNDLE_MGR_SERVICE_SYS_ABILITY_ID);
     if (!remoteObject) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "GetBundleMgrProxy, remoteObject is null");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleMgrProxy, remoteObject is null");
         return nullptr;
     }
-    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "call end");
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
     return iface_cast<AppExecFwk::IBundleMgr>(remoteObject);
 }
 
 int32_t BundleInfoQuery::GetCurrentAccountId()
 {
-    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "called");
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
     std::vector<int32_t> osAccountIds;
     ErrCode ret = AccountSA::OsAccountManager::QueryActiveOsAccountIds(osAccountIds);
     if (ret != ERR_OK) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "QueryActiveOsAccountIds failed.");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "QueryActiveOsAccountIds failed.");
         return -1;
     }
 
     if (osAccountIds.empty()) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "osAccountInfos is empty, no accounts.");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "osAccountInfos is empty, no accounts.");
         return -1;
     }
 
-    auto iter = std::find_if(osAccountIds.cbegin(), osAccountIds.cend(),
-        [](const int32_t &accountId) { return accountId >= 0; });
+    auto iter = std::find_if(
+        osAccountIds.cbegin(), osAccountIds.cend(), [](const int32_t& accountId) { return accountId >= 0; });
     if (iter != osAccountIds.end()) {
-        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "call end");
+        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
         return *iter;
     }
-    APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE,
-        "GetCurrentAccountId failed, no osAccountIds now.");
+    APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetCurrentAccountId failed, no osAccountIds now.");
     return -1;
 }
+bool BundleInfoQuery::GetBundleNameForUid(const int uid, std::string& bundleName)
+{
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
+    sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
+
+    if (bundleMgrProxy == nullptr) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "bundleMgrProxy is nullptr.");
+        UNIVERSAL_ERROR_EVENT(CONNECT_OTHER_FAULT);
+        return false;
+    }
+
+    OHOS::AppExecFwk::BundleInfo bundleInfo;
+    auto ret = bundleMgrProxy->GetBundleNameForUid(uid, bundleName);
+    if (ret != ERR_OK) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
+        return false;
+    }
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
+    return true;
+}
+bool BundleInfoQuery::GetBundleNameSelf(std::string& bundleName)
+{
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
+    sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
+
+    if (bundleMgrProxy == nullptr) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "bundleMgrProxy is nullptr.");
+        UNIVERSAL_ERROR_EVENT(CONNECT_OTHER_FAULT);
+        return false;
+    }
+
+    OHOS::AppExecFwk::BundleInfo bundleInfo;
+    auto ret = bundleMgrProxy->GetBundleInfoForSelf(0, bundleInfo);
+    if (ret != ERR_OK) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
+        return false;
+    }
+    bundleName = bundleInfo.name;
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
+    return true;
+}
+bool BundleInfoQuery::QueryAbilityInfosByUrl(const std::string& url, std::vector<AbilityInfo>& abilityInfos)
+{
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
+    sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
+
+    if (bundleMgrProxy == nullptr) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "bundleMgrProxy is nullptr.");
+        UNIVERSAL_ERROR_EVENT(CONNECT_OTHER_FAULT);
+        return false;
+    }
+    Want want;
+    want.SetUri(url);
+    OHOS::AppExecFwk::BundleInfo bundleInfo;
+    auto ret = bundleMgrProxy->QueryAbilityInfosV9(
+        want, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, 0, abilityInfos);
+    if (ret != ERR_OK) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
+        return false;
+    }
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
+    return true;
+}
+
 }
 }
\ No newline at end of file
diff --git a/interfaces/inner_api/client/BUILD.gn b/interfaces/inner_api/client/BUILD.gn
index fb0566b..b9b44ff 100644
--- a/interfaces/inner_api/client/BUILD.gn
+++ b/interfaces/inner_api/client/BUILD.gn
@@ -24,6 +24,7 @@ config("app_domain_verify_mgr_client_config") {
     "${app_domain_verify_common_path}/include/zidl",
     "${app_domain_verify_frameworks_common_path}/include",
     "${app_domain_verify_frameworks_common_path}/include/dfx",
+    "${app_domain_verify_frameworks_common_path}/include/bms",
   ]
   cflags = [
     "-fdata-sections",
@@ -60,6 +61,7 @@ config("app_domain_verify_agent_client_config") {
 ohos_shared_library("app_domain_verify_mgr_client") {
   branch_protector_ret = "pac_ret"
   sources = [
+    "${app_domain_verify_frameworks_common_path}/src/bms/bundle_info_query.cpp",
     "${app_domain_verify_service_path}/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp",
     "src/app_domain_verify_mgr_client.cpp",
   ]
@@ -71,10 +73,12 @@ ohos_shared_library("app_domain_verify_mgr_client") {
     "ability_base:want",
     "ability_base:zuri",
     "bundle_framework:appexecfwk_base",
+    "bundle_framework:appexecfwk_core",
     "c_utils:utils",
     "hilog:libhilog",
     "hisysevent:libhisysevent",
     "ipc:ipc_core",
+    "os_account:os_account_innerkits",
     "samgr:samgr_proxy",
   ]
   defines = []
diff --git a/interfaces/inner_api/client/include/app_domain_verify_mgr_client.h b/interfaces/inner_api/client/include/app_domain_verify_mgr_client.h
index 6d6dc4d..1186d17 100644
--- a/interfaces/inner_api/client/include/app_domain_verify_mgr_client.h
+++ b/interfaces/inner_api/client/include/app_domain_verify_mgr_client.h
@@ -130,6 +130,14 @@ public:
      */
     int QueryAssociatedBundleNames(const std::string& domain, std::vector<std::string>& bundleNames);
 
+    /**
+     * GetDeferredLink
+     * @descrition get deferred link for app.
+     * @param link link to get.
+     * @return result status.
+     */
+    int GetDeferredLink(std::string& link);
+
     /**
      * OnRemoteSaDied
      * @descrition
diff --git a/interfaces/inner_api/client/src/app_domain_verify_agent_client.cpp b/interfaces/inner_api/client/src/app_domain_verify_agent_client.cpp
index c7d37ef..15e9aa0 100644
--- a/interfaces/inner_api/client/src/app_domain_verify_agent_client.cpp
+++ b/interfaces/inner_api/client/src/app_domain_verify_agent_client.cpp
@@ -72,7 +72,7 @@ void AppDomainVerifyAgentClient::ConnectService()
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_CLIENT, "ConnectService start.");
     sptr<ISystemAbilityManager> samgrProxy = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
     if (samgrProxy == nullptr) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_CLIENT, "Get SystemAbilityManager failed.");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_CLIENT, "GetDeferredLink SystemAbilityManager failed.");
         agentServiceProxy_ = nullptr;
         return;
     }
@@ -81,7 +81,7 @@ void AppDomainVerifyAgentClient::ConnectService()
         remoteObject = samgrProxy->LoadSystemAbility(APP_DOMAIN_VERIFY_AGENT_SA_ID, LOADSA_TIMEOUT_MS);
     }
     if (remoteObject != nullptr) {
-        APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_AGENT_MODULE_CLIENT, "Get AgentServiceProxy succeed.");
+        APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_AGENT_MODULE_CLIENT, "GetDeferredLink AgentServiceProxy succeed.");
         if (deathRecipient_ == nullptr) {
             deathRecipient_ = sptr<IRemoteObject::DeathRecipient>(new AgentSaDeathRecipient());
         }
diff --git a/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp b/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp
index 91e1414..47d79db 100644
--- a/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp
+++ b/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp
@@ -23,6 +23,7 @@
 #include "comm_define.h"
 #include "ipc_skeleton.h"
 #include "common_utils.h"
+#include "bundle_info_query.h"
 
 namespace OHOS {
 namespace AppDomainVerify {
@@ -150,13 +151,14 @@ void AppDomainVerifyMgrClient::ConnectService()
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "ConnectService start.");
     sptr<ISystemAbilityManager> samgrProxy = SystemAbilityManagerClient::GetInstance().GetSystemAbilityManager();
     if (samgrProxy == nullptr) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "Get SystemAbilityManager failed.");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "ConnectService SystemAbilityManager failed.");
         appDomainVerifyMgrServiceProxy_ = nullptr;
         return;
     }
     sptr<IRemoteObject> remoteObject = samgrProxy->CheckSystemAbility(APP_DOMAIN_VERIFY_MANAGER_SA_ID);
     if (remoteObject != nullptr) {
-        APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "Get AppDomainVerifyMgrServiceProxy succeed.");
+        APP_DOMAIN_VERIFY_HILOGI(
+            APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "ConnectService AppDomainVerifyMgrServiceProxy succeed.");
         if (deathRecipient_ == nullptr) {
             deathRecipient_ = sptr<IRemoteObject::DeathRecipient>(new AppDomainVerifyMgrSaDeathRecipient());
         }
@@ -257,8 +259,7 @@ bool AppDomainVerifyMgrClient::IsAtomicServiceUrl(const std::string& url)
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "not support, will return false!");
     return false;
 #else
-    APP_DOMAIN_VERIFY_HILOGI(
-        APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "called, url %{public}s", MaskStr(url).c_str());
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "called, url %{public}s", MaskStr(url).c_str());
     Uri uri(url);
     if (!IsValidUrl(uri)) {
         APP_DOMAIN_VERIFY_HILOGW(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "url is invalid!");
@@ -302,6 +303,12 @@ int AppDomainVerifyMgrClient::QueryAssociatedDomains(const std::string& bundleNa
 int AppDomainVerifyMgrClient::QueryAssociatedBundleNames(
     const std::string& domain, std::vector<std::string>& bundleNames)
 {
+
+
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "GetDeferredLink start");
+    std::string link;
+    GetDeferredLink(link);
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "GetDeferredLink end, link %{public}s", link.c_str());
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "called");
     std::lock_guard<std::mutex> autoLock(proxyLock_);
     if (IsServiceAvailable()) {
@@ -310,6 +317,23 @@ int AppDomainVerifyMgrClient::QueryAssociatedBundleNames(
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "call end");
     return CommonErrorCode::E_INTERNAL_ERR;
 }
+int AppDomainVerifyMgrClient::GetDeferredLink(std::string& link)
+{
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "called");
+    std::string bundleName;
+
+    if(!BundleInfoQuery::GetBundleNameSelf(bundleName)){
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "can not get bundleName");
+        return CommonErrorCode::E_INTERNAL_ERR;
+    }
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "bundleInfo %{public}s", bundleName.c_str());
+    std::lock_guard<std::mutex> autoLock(proxyLock_);
+    if (IsServiceAvailable()) {
+        return appDomainVerifyMgrServiceProxy_->GetDeferredLink(bundleName, link);
+    }
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "call end");
+    return CommonErrorCode::E_INTERNAL_ERR;
+}
 AppDomainVerifyMgrSaDeathRecipient::AppDomainVerifyMgrSaDeathRecipient()
 {
 }
diff --git a/interfaces/kits/js/src/app_domain_verify_manager_napi.cpp b/interfaces/kits/js/src/app_domain_verify_manager_napi.cpp
index 84753fd..7fdcf6c 100644
--- a/interfaces/kits/js/src/app_domain_verify_manager_napi.cpp
+++ b/interfaces/kits/js/src/app_domain_verify_manager_napi.cpp
@@ -20,6 +20,7 @@
 #include "app_domain_verify_mgr_client.h"
 #include "comm_define.h"
 #include "api_event_reporter.h"
+
 namespace OHOS::AppDomainVerify {
 constexpr int32_t API_SUCCESS = 0;
 constexpr int32_t API_FAIL = 1;
diff --git a/services/BUILD.gn b/services/BUILD.gn
index 2e20fa3..d42cf3f 100644
--- a/services/BUILD.gn
+++ b/services/BUILD.gn
@@ -23,11 +23,13 @@ config("app_domain_verify_service_config") {
     "include/manager/rdb",
     "include/manager/zidl",
     "include/manager/permission",
+    "include/manager/deferred_link",
     "include/agent/core",
     "${app_domain_verify_common_path}/include",
     "${app_domain_verify_common_path}/include/zidl",
     "${app_domain_verify_frameworks_common_path}/include",
     "${app_domain_verify_frameworks_common_path}/include/utils",
+    "${app_domain_verify_frameworks_common_path}/include/bms",
     "${app_domain_verify_frameworks_common_path}/include/config",
     "${app_domain_verify_frameworks_common_path}/include/dfx",
   ]
@@ -51,10 +53,12 @@ config("app_domain_verify_service_config") {
 ohos_shared_library("app_domain_verify_mgr_service") {
   branch_protector_ret = "pac_ret"
   sources = [
+    "${app_domain_verify_frameworks_common_path}/src/bms/bundle_info_query.cpp",
     "${app_domain_verify_frameworks_common_path}/src/config/white_list_config_mgr.cpp",
     "${app_domain_verify_frameworks_common_path}/src/utils/domain_url_util.cpp",
     "src/manager/core/app_domain_verify_data_mgr.cpp",
     "src/manager/core/app_domain_verify_mgr_service.cpp",
+    "src/manager/deferred_link/deferred_link_mgr.cpp",
     "src/manager/permission/permission_manager.cpp",
     "src/manager/rdb/app_domain_verify_rdb_data_manager.cpp",
     "src/manager/rdb/app_domain_verify_rdb_open_callback.cpp",
@@ -87,6 +91,7 @@ ohos_shared_library("app_domain_verify_mgr_service") {
     "hisysevent:libhisysevent",
     "ipc:ipc_core",
     "json:nlohmann_json_static",
+    "os_account:os_account_innerkits",
     "preferences:native_preferences",
     "relational_store:native_rdb",
     "safwk:system_ability_fwk",
diff --git a/services/include/manager/core/app_domain_verify_data_mgr.h b/services/include/manager/core/app_domain_verify_data_mgr.h
index ec0e7fe..8c683b6 100644
--- a/services/include/manager/core/app_domain_verify_data_mgr.h
+++ b/services/include/manager/core/app_domain_verify_data_mgr.h
@@ -33,7 +33,7 @@ public:
     virtual ~AppDomainVerifyDataMgr();
 
     /**
-     * @brief Get AppDomainVerify status.
+     * @brief GetDeferredLink AppDomainVerify status.
      * @param bundleName Indicates the bundleName.
      * @param verifyResultInfo output value.
      * @return Returns true if this function is successfully called; returns false
@@ -68,7 +68,7 @@ public:
     bool DeleteVerifyStatus(const std::string& bundleName);
 
     /**
-     * @brief Get all AppDomainVerify status.
+     * @brief GetDeferredLink all AppDomainVerify status.
      * @return Returns verifyMap_ const ref
      * otherwise.
      */
diff --git a/services/include/manager/core/app_domain_verify_mgr_interface_code.h b/services/include/manager/core/app_domain_verify_mgr_interface_code.h
index b47a96b..00a3c7a 100644
--- a/services/include/manager/core/app_domain_verify_mgr_interface_code.h
+++ b/services/include/manager/core/app_domain_verify_mgr_interface_code.h
@@ -27,7 +27,8 @@ enum AppDomainVerifyMgrInterfaceCode {
     CONVERT_TO_EXPLICIT_WANT = 7,
     UPDATE_WHITE_LIST_URLS = 8,
     QUERY_ASSOCIATED_DOMAINS = 9,
-    QUERY_ASSOCIATED_BUNDLE_NAMES = 10
+    QUERY_ASSOCIATED_BUNDLE_NAMES = 10,
+    GET_DEFERRED_LINK = 11
 };
 }
 }  // namespace OHOS
diff --git a/services/include/manager/core/app_domain_verify_mgr_service.h b/services/include/manager/core/app_domain_verify_mgr_service.h
index 6465dc7..e742d9a 100644
--- a/services/include/manager/core/app_domain_verify_mgr_service.h
+++ b/services/include/manager/core/app_domain_verify_mgr_service.h
@@ -25,6 +25,7 @@
 #include "app_domain_verify_data_mgr.h"
 #include "white_list_config_mgr.h"
 #include "permission_manager.h"
+#include "deferred_link_mgr.h"
 
 namespace OHOS {
 namespace AppDomainVerify {
@@ -33,13 +34,13 @@ class AppDomainVerifyMgrService : public SystemAbility, public AppDomainVerifyMg
 
 public:
     API_EXPORT AppDomainVerifyMgrService();
-    API_EXPORT virtual ~AppDomainVerifyMgrService();
+    API_EXPORT ~AppDomainVerifyMgrService() override;
     API_EXPORT void VerifyDomain(const std::string& appIdentifier, const std::string& bundleName,
         const std::string& fingerprint, const std::vector<SkillUri>& skillUris) override;
     API_EXPORT bool ClearDomainVerifyStatus(const std::string& appIdentifier, const std::string& bundleName) override;
     API_EXPORT bool FilterAbilities(const OHOS::AAFwk::Want& want,
         const std::vector<OHOS::AppExecFwk::AbilityInfo>& originAbilityInfos,
-        std::vector<OHOS::AppExecFwk::AbilityInfo>& filtedAbilityInfos) override;
+        std::vector<OHOS::AppExecFwk::AbilityInfo>& filteredAbilityInfos) override;
     API_EXPORT bool QueryDomainVerifyStatus(
         const std::string& bundleName, DomainVerifyStatus& domainVerificationState) override;
     API_EXPORT bool QueryAllDomainVerifyStatus(BundleVerifyStatusInfo& bundleVerifyStatusInfo) override;
@@ -51,6 +52,7 @@ public:
     API_EXPORT int QueryAssociatedDomains(const std::string& bundleName, std::vector<std::string>& domains) override;
     API_EXPORT int QueryAssociatedBundleNames(
         const std::string& domain, std::vector<std::string>& bundleNames) override;
+    API_EXPORT int GetDeferredLink(const std::string& bundleName, std::string& link) override;
 
 protected:
     void OnDump() override;
@@ -69,6 +71,7 @@ private:
     bool InitConfigMgr();
     std::shared_ptr<WhiteListConfigMgr> whiteListConfigMgr_;
     std::mutex initConfigMutex_;
+    std::shared_ptr<DeferredLinkMgr> deferredLinkMgr_;
 };
 }  // namespace AppDomainVerify
 }  // namespace OHOS
diff --git a/services/include/manager/core/i_app_domain_verify_mgr_service.h b/services/include/manager/core/i_app_domain_verify_mgr_service.h
index 4ece0a7..46ec1ae 100644
--- a/services/include/manager/core/i_app_domain_verify_mgr_service.h
+++ b/services/include/manager/core/i_app_domain_verify_mgr_service.h
@@ -33,7 +33,7 @@ public:
     virtual bool ClearDomainVerifyStatus(const std::string& appIdentifier, const std::string& bundleName) = 0;
     virtual bool FilterAbilities(const OHOS::AAFwk::Want& want,
         const std::vector<OHOS::AppExecFwk::AbilityInfo>& originAbilityInfos,
-        std::vector<OHOS::AppExecFwk::AbilityInfo>& filtedAbilityInfos) = 0;
+        std::vector<OHOS::AppExecFwk::AbilityInfo>& filteredAbilityInfos) = 0;
     virtual bool QueryDomainVerifyStatus(
         const std::string& bundleName, DomainVerifyStatus& domainVerificationState) = 0;
     virtual bool QueryAllDomainVerifyStatus(BundleVerifyStatusInfo& bundleVerifyStatusInfo) = 0;
@@ -43,6 +43,7 @@ public:
     virtual void ConvertToExplicitWant(OHOS::AAFwk::Want& implicitWant, sptr<IConvertCallback>& callback) = 0;
     virtual int QueryAssociatedDomains(const std::string& bundleName, std::vector<std::string>& domains) = 0;
     virtual int QueryAssociatedBundleNames(const std::string& domain, std::vector<std::string>& bundleNames) = 0;
+    virtual int GetDeferredLink(const std::string& bundleName, std::string& link) = 0;
     DECLARE_INTERFACE_DESCRIPTOR(u"ohos.appDomainVerify.IAppDomainVerifyMgrService");
 };
 }  // namespace AppDomainVerify
diff --git a/services/include/manager/deferred_link/deferred_link_mgr.h b/services/include/manager/deferred_link/deferred_link_mgr.h
new file mode 100644
index 0000000..9bb9363
--- /dev/null
+++ b/services/include/manager/deferred_link/deferred_link_mgr.h
@@ -0,0 +1,60 @@
+//
+// Created by w00373214 on 10/21/24.
+//
+
+#ifndef APP_DOMAIN_VERIFY_DEFERRED_LINK_MGR_H
+#define APP_DOMAIN_VERIFY_DEFERRED_LINK_MGR_H
+#include <string>
+#include <mutex>
+#include <set>
+#include "datetime_ex.h"
+#include "uri.h"
+#include "event_handler.h"
+#include "event_runner.h"
+#include "app_domain_verify_hilog.h"
+#include "bundle_info_query.h"
+
+namespace OHOS::AppDomainVerify {
+
+struct DeferredLinkInfo {
+    std::string domain;
+    std::string url;
+    int64_t timeStamp;
+};
+/**
+ * PutDeferredLink
+ * @descrition put deferred link info
+ * @param domain the domain of url.
+ * @param url the url to open.
+ */
+class DeferredLinkMgr {
+public:
+    DeferredLinkMgr() = default;
+    /**
+     * PutDeferredLink
+     * @descrition put deferred link info
+     * @param domain the domain of url.
+     * @param url the url to open.
+     */
+    void PutDeferredLink(const DeferredLinkInfo& info);
+    /**
+     * GetDeferredLink
+     * @descrition get deferred link within domains
+     * @param domains the domains to filter link info.
+     * @return url the deferred url to open.
+     */
+    std::string GetDeferredLink(const std::vector<std::string>& domains);
+
+    ~DeferredLinkMgr();
+
+private:
+    static bool CanMatchAbility(const std::string& url);
+    void PostAgeTask();
+    void AgeCacheProcess();
+    std::list<DeferredLinkInfo> caches;
+    std::mutex mutex_;
+    std::shared_ptr<AppExecFwk::EventHandler> ageHandler_;
+    std::shared_ptr<AppExecFwk::EventRunner> ageRunner_;
+};
+}
+#endif  // APP_DOMAIN_VERIFY_DEFERRED_LINK_MGR_H
diff --git a/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h b/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h
index dfbf2ae..264ee94 100644
--- a/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h
+++ b/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h
@@ -24,23 +24,24 @@ namespace AppDomainVerify {
 class AppDomainVerifyMgrServiceProxy : public IRemoteProxy<IAppDomainVerifyMgrService> {
 public:
     explicit AppDomainVerifyMgrServiceProxy(const sptr<IRemoteObject>& object);
-    virtual ~AppDomainVerifyMgrServiceProxy();
-    virtual void VerifyDomain(const std::string& appIdentifier, const std::string& bundleName,
+    ~AppDomainVerifyMgrServiceProxy() override;
+    void VerifyDomain(const std::string& appIdentifier, const std::string& bundleName,
         const std::string& fingerprint, const std::vector<SkillUri>& skillUris) override;
-    virtual bool ClearDomainVerifyStatus(const std::string& appIdentifier, const std::string& bundleName) override;
-    virtual bool FilterAbilities(const OHOS::AAFwk::Want& want,
+    bool ClearDomainVerifyStatus(const std::string& appIdentifier, const std::string& bundleName) override;
+    bool FilterAbilities(const OHOS::AAFwk::Want& want,
         const std::vector<OHOS::AppExecFwk::AbilityInfo>& originAbilityInfos,
-        std::vector<OHOS::AppExecFwk::AbilityInfo>& filtedAbilityInfos) override;
-    virtual bool QueryDomainVerifyStatus(
+        std::vector<OHOS::AppExecFwk::AbilityInfo>& filteredAbilityInfos) override;
+    bool QueryDomainVerifyStatus(
         const std::string& bundleName, DomainVerifyStatus& domainVerificationState) override;
-    virtual bool QueryAllDomainVerifyStatus(BundleVerifyStatusInfo& bundleVerifyStatusInfo) override;
-    virtual bool SaveDomainVerifyStatus(
+    bool QueryAllDomainVerifyStatus(BundleVerifyStatusInfo& bundleVerifyStatusInfo) override;
+    bool SaveDomainVerifyStatus(
         const std::string& bundleName, const VerifyResultInfo& verifyResultInfo) override;
-    virtual bool IsAtomicServiceUrl(const std::string& url) override;
-    virtual void ConvertToExplicitWant(OHOS::AAFwk::Want& implicitWant, sptr<IConvertCallback>& callback) override;
-    virtual void UpdateWhiteListUrls(const std::vector<std::string>& urls) override;
-    virtual int QueryAssociatedDomains(const std::string& bundleName, std::vector<std::string>& domains) override;
-    virtual int QueryAssociatedBundleNames(const std::string& domain, std::vector<std::string>& bundleNames) override;
+    bool IsAtomicServiceUrl(const std::string& url) override;
+    void ConvertToExplicitWant(OHOS::AAFwk::Want& implicitWant, sptr<IConvertCallback>& callback) override;
+    void UpdateWhiteListUrls(const std::vector<std::string>& urls) override;
+    int QueryAssociatedDomains(const std::string& bundleName, std::vector<std::string>& domains) override;
+    int QueryAssociatedBundleNames(const std::string& domain, std::vector<std::string>& bundleNames) override;
+    int GetDeferredLink(const std::string& bundleName, std::string& link) override;
 private:
     static inline BrokerDelegator<AppDomainVerifyMgrServiceProxy> delegator_;
 };
diff --git a/services/include/manager/zidl/app_domain_verify_mgr_service_stub.h b/services/include/manager/zidl/app_domain_verify_mgr_service_stub.h
index 0667ae1..6a481ed 100644
--- a/services/include/manager/zidl/app_domain_verify_mgr_service_stub.h
+++ b/services/include/manager/zidl/app_domain_verify_mgr_service_stub.h
@@ -27,7 +27,7 @@ namespace AppDomainVerify {
 class AppDomainVerifyMgrServiceStub : public IRemoteStub<IAppDomainVerifyMgrService> {
 public:
     API_EXPORT AppDomainVerifyMgrServiceStub();
-    API_EXPORT virtual ~AppDomainVerifyMgrServiceStub();
+    API_EXPORT ~AppDomainVerifyMgrServiceStub() override;
     API_EXPORT int32_t OnRemoteRequest(
         uint32_t code, MessageParcel& data, MessageParcel& reply, MessageOption& option) override;
 
@@ -43,6 +43,7 @@ private:
     int32_t OnUpdateWhiteListUrls(MessageParcel& data, MessageParcel& reply);
     int32_t OnQueryAssociatedDomains(MessageParcel& data, MessageParcel& reply);
     int32_t OnQueryAssociatedBundleNames(MessageParcel& data, MessageParcel& reply);
+    int32_t OnGetDeferredLink(MessageParcel& data, MessageParcel& reply);
 };
 }  // namespace AppDomainVerify
 }  // namespace OHOS
diff --git a/services/src/manager/core/app_domain_verify_mgr_service.cpp b/services/src/manager/core/app_domain_verify_mgr_service.cpp
index d182734..f3b863d 100644
--- a/services/src/manager/core/app_domain_verify_mgr_service.cpp
+++ b/services/src/manager/core/app_domain_verify_mgr_service.cpp
@@ -17,11 +17,15 @@
 #include <string>
 #include <tuple>
 #include <vector>
+#include "ipc_skeleton.h"
 #include "app_domain_verify_mgr_service.h"
 #include "system_ability_definition.h"
 #include "domain_url_util.h"
 #include "app_domain_verify_agent_client.h"
 #include "comm_define.h"
+#include "deferred_link_mgr.h"
+#include "uri.h"
+#include "bundle_info_query.h"
 namespace OHOS {
 namespace AppDomainVerify {
 constexpr const char* GET_DOMAIN_VERIFY_INFO = "ohos.permission.GET_APP_DOMAIN_BUNDLE_INFO";
@@ -76,7 +80,7 @@ bool AppDomainVerifyMgrService::ClearDomainVerifyStatus(const std::string& appId
 
 bool AppDomainVerifyMgrService::FilterAbilities(const OHOS::AAFwk::Want& want,
     const std::vector<OHOS::AppExecFwk::AbilityInfo>& originAbilityInfos,
-    std::vector<OHOS::AppExecFwk::AbilityInfo>& filtedAbilityInfos)
+    std::vector<OHOS::AppExecFwk::AbilityInfo>& filteredAbilityInfos)
 {
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called");
     if (!PermissionManager::IsSACall()) {
@@ -104,10 +108,14 @@ bool AppDomainVerifyMgrService::FilterAbilities(const OHOS::AAFwk::Want& want,
             auto itr = verifyResultInfo.hostVerifyStatusMap.find(hostVerifyKey);
             if (itr != verifyResultInfo.hostVerifyStatusMap.end() &&
                 std::get<0>(itr->second) == InnerVerifyStatus::STATE_SUCCESS) {
-                filtedAbilityInfos.emplace_back(*it);
+                filteredAbilityInfos.emplace_back(*it);
             }
         }
     }
+    if (filteredAbilityInfos.empty()) {
+        deferredLinkMgr_->PutDeferredLink(
+            { .domain = hostVerifyKey, .url = uriString, .timeStamp = GetSecondsSince1970ToNow() });
+    }
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "call end");
     return true;
 }
@@ -270,8 +278,8 @@ void AppDomainVerifyMgrService::DumpAllVerifyInfos(std::string& dumpString)
         dumpString.append("\n");
         dumpString.append("  domain verify status:\n");
         for (const auto& hostVerifyStatus : verifyResultInfo.hostVerifyStatusMap) {
-            dumpString.append("    " + hostVerifyStatus.first + ":" +
-                InnerVerifyStatusMap[std::get<0>(hostVerifyStatus.second)]);
+            dumpString.append(
+                "    " + hostVerifyStatus.first + ":" + InnerVerifyStatusMap[std::get<0>(hostVerifyStatus.second)]);
             dumpString.append("\n");
         }
     }
@@ -322,8 +330,26 @@ void AppDomainVerifyMgrService::CollectDomains(
         }
         // validUris remove duplicates
         auto uri = it->scheme + "://" + host;
-        verifyResultInfo.hostVerifyStatusMap.insert(make_pair(
-            uri, std::make_tuple(InnerVerifyStatus::UNKNOWN, std::string(), 0)));
+        verifyResultInfo.hostVerifyStatusMap.insert(
+            make_pair(uri, std::make_tuple(InnerVerifyStatus::UNKNOWN, std::string(), 0)));
+    }
+}
+int AppDomainVerifyMgrService::GetDeferredLink(const std::string& bundleName, std::string& link)
+{
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called");
+    if (!PermissionManager::IsSACall()) {
+        std::vector<std::string> domains;
+        if (dataManager_->QueryAssociatedDomains(bundleName, domains)) {
+            link = deferredLinkMgr_->GetDeferredLink(domains);
+            APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "get link, %{private}s.", link.c_str());
+            return CommonErrorCode::E_OK;
+        } else {
+            APP_DOMAIN_VERIFY_HILOGW(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "can not get associate domains");
+            return CommonErrorCode::E_INTERNAL_ERR;
+        }
+    } else {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "no support no app call.");
+        return CommonErrorCode::E_PERMISSION_DENIED;
     }
 }
 }  // namespace AppDomainVerify
diff --git a/services/src/manager/deferred_link/deferred_link_mgr.cpp b/services/src/manager/deferred_link/deferred_link_mgr.cpp
new file mode 100644
index 0000000..76e92d4
--- /dev/null
+++ b/services/src/manager/deferred_link/deferred_link_mgr.cpp
@@ -0,0 +1,95 @@
+//
+// Created by w00373214 on 10/23/24.
+//
+#include "deferred_link_mgr.h"
+
+namespace OHOS::AppDomainVerify {
+namespace {
+constexpr const char* TASK_ID = "age";
+constexpr int32_t DELAY_TIME = 120000;       // 2min
+constexpr int64_t MAX_CACHE_TIME = 1200000;  // 10min
+constexpr int MAX_SIZE = 50;
+}
+void DeferredLinkMgr::PutDeferredLink(const DeferredLinkInfo& info)
+{
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
+    std::unique_lock<std::mutex> lock(mutex_);
+    if (caches.size() == MAX_SIZE) {
+        caches.pop_back();
+    }
+    caches.push_front(info);
+    if (caches.size() == 1) {
+        PostAgeTask();
+    }
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "info domain:%{private}s, url:%{private}s.",
+        info.domain.c_str(), info.url.c_str());
+}
+/**
+ * GetDeferredLink
+ * @descrition get deferred link within domains
+ * @param domains the domains to filter link info.
+ * @return url the deferred url to open.
+ */
+std::string DeferredLinkMgr::GetDeferredLink(const std::vector<std::string>& domains)
+{
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
+    std::string result;
+    std::set<std::string> domainSet(domains.begin(), domains.end());
+    std::unique_lock<std::mutex> lock(mutex_);
+    auto target = std::find_if(caches.cbegin(), caches.cend(), [&domainSet](const DeferredLinkInfo& linkInfo) {
+        Uri uri(linkInfo.url);
+        if (domainSet.count(uri.GetScheme() + "://" + uri.GetHost()) != 0 && CanMatchAbility(linkInfo.url)) {
+            APP_DOMAIN_VERIFY_HILOGI(
+                APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "find target url:%{private}s", linkInfo.url.c_str());
+            return true;
+        }
+        return false;
+    });
+    if (target != caches.end()) {
+        result = target->url;
+        caches.erase(target);
+        return result;
+    }
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "get deferred url:%{private}s", result.c_str());
+    return result;
+}
+
+DeferredLinkMgr::~DeferredLinkMgr()
+{
+}
+
+bool DeferredLinkMgr::CanMatchAbility(const std::string& url)
+{
+    bool result{ false };
+    std::vector<AbilityInfo> abilityInfos;
+    if (BundleInfoQuery::QueryAbilityInfosByUrl(url, abilityInfos)) {
+        for (const auto& ability : abilityInfos) {
+            APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE,
+                "QueryAbilityInfosByUrl name:%{private}s,bundle name:%{private}s.", ability.name.c_str(),
+                ability.bundleName.c_str());
+        }
+        result = true;
+    }
+    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "CanMatchAbility %{public}d.", result);
+    return result;
+}
+void DeferredLinkMgr::PostAgeTask()
+{
+    if (ageHandler_) {
+        ageHandler_->PostTask([this] { AgeCacheProcess(); }, TASK_ID, DELAY_TIME);
+    }
+}
+void DeferredLinkMgr::AgeCacheProcess()
+{
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "age func in.");
+    std::unique_lock<std::mutex> lock(mutex_);
+    int64_t now = GetSecondsSince1970ToNow();
+    caches.remove_if([now](const DeferredLinkInfo& linkInfo) { return now - linkInfo.timeStamp >= MAX_CACHE_TIME; });
+    if (!caches.empty()) {
+        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "post continue age task.");
+        PostAgeTask();
+    } else {
+        APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "age task end.");
+    }
+}
+}
\ No newline at end of file
diff --git a/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp b/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp
index 5bf6f17..b991d8d 100644
--- a/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp
+++ b/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp
@@ -75,7 +75,7 @@ bool AppDomainVerifyMgrServiceProxy::ClearDomainVerifyStatus(
 
 bool AppDomainVerifyMgrServiceProxy::FilterAbilities(const OHOS::AAFwk::Want& want,
     const std::vector<OHOS::AppExecFwk::AbilityInfo>& originAbilityInfos,
-    std::vector<OHOS::AppExecFwk::AbilityInfo>& filtedAbilityInfos)
+    std::vector<OHOS::AppExecFwk::AbilityInfo>& filteredAbilityInfos)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "called");
     MessageParcel data;
@@ -112,7 +112,7 @@ bool AppDomainVerifyMgrServiceProxy::FilterAbilities(const OHOS::AAFwk::Want& wa
             APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "Read Parcelable AbilityInfo failed");
             return false;
         }
-        filtedAbilityInfos.emplace_back(*info);
+        filteredAbilityInfos.emplace_back(*info);
     }
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "call end");
     return true;
@@ -323,5 +323,29 @@ int AppDomainVerifyMgrServiceProxy::QueryAssociatedBundleNames(
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "call end");
     return result;
 }
+int AppDomainVerifyMgrServiceProxy::GetDeferredLink(const std::string& bundleName, std::string& link)
+{
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "called");
+    MessageParcel data;
+    MessageParcel reply;
+    MessageOption option;
+    WRITE_PARCEL_AND_RETURN_INT_IF_FAIL(InterfaceToken, data, GetDescriptor());
+    WRITE_PARCEL_AND_RETURN_INT_IF_FAIL(String, data, bundleName);
+
+    int32_t error = Remote()->SendRequest(
+        AppDomainVerifyMgrInterfaceCode::GET_DEFERRED_LINK, data, reply, option);
+    if (error != ERR_NONE) {
+        APP_DOMAIN_VERIFY_HILOGE(
+            APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "QueryAssociatedBundleNames failed, error: %d", error);
+    }
+    int32_t result = reply.ReadInt32();
+    if (result != 0) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "result failed, result: %d", result);
+        return result;
+    }
+    READ_PARCEL_AND_RETURN_INT_IF_FAIL(String, reply, link);
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "call end");
+    return result;
+}
 }  // namespace AppDomainVerify
 }  // namespace OHOS
diff --git a/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp b/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp
index 8bfd001..ad2f964 100644
--- a/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp
+++ b/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp
@@ -66,6 +66,8 @@ int32_t AppDomainVerifyMgrServiceStub::OnRemoteRequest(
             return OnQueryAssociatedDomains(data, reply);
         case static_cast<uint32_t>(AppDomainVerifyMgrInterfaceCode::QUERY_ASSOCIATED_BUNDLE_NAMES):
             return OnQueryAssociatedBundleNames(data, reply);
+        case static_cast<uint32_t>(AppDomainVerifyMgrInterfaceCode::GET_DEFERRED_LINK):
+            return OnGetDeferredLink(data, reply);
         default:
             APP_DOMAIN_VERIFY_HILOGW(
                 APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "receive unknown code, code = %{public}d", code);
@@ -263,5 +265,19 @@ int32_t AppDomainVerifyMgrServiceStub::OnQueryAssociatedBundleNames(MessageParce
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "call end");
     return ERR_OK;
 }
+int32_t AppDomainVerifyMgrServiceStub::OnGetDeferredLink(MessageParcel& data, MessageParcel& reply)
+{
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called");
+    std::string bundleName;
+    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(String, data, bundleName);
+
+    std::string link;
+    int ret = GetDeferredLink(bundleName, link);
+
+    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, reply, ret);
+    WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String, reply, link);
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "call end");
+    return ERR_OK;
+}
 }  // namespace AppDomainVerify
 }  // namespace OHOS
\ No newline at end of file
diff --git a/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
new file mode 100644
index 0000000..5941372
--- /dev/null
+++ b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
@@ -0,0 +1,61 @@
+/*
+ * Copyright (C) 2023 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "gtest/gtest.h"
+#include "mock_constant.h"
+#define private public
+#define protected public
+#include "deferred_link_mgr.h"
+#undef private
+#undef protected
+namespace OHOS::AppDomainVerify {
+using namespace testing;
+using namespace testing::ext;
+
+class DeferredLinkMgrTest : public testing::Test {
+public:
+    static void SetUpTestCase(void);
+    static void TearDownTestCase(void);
+    void SetUp();
+    void TearDown();
+};
+
+void DeferredLinkMgrTest::SetUpTestCase(void)
+{
+}
+
+void DeferredLinkMgrTest::TearDownTestCase(void)
+{
+}
+
+void DeferredLinkMgrTest::SetUp(void)
+{
+}
+
+void DeferredLinkMgrTest::TearDown(void)
+{
+}
+/**
+ * @tc.name: RdbOpenCallbackTest001
+ * @tc.desc: Callback test
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, RdbOpenCallbackTest001, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.PutDeferredLink();
+    deferredLinkMgr.GetDeferredLink();
+}
+
+}
\ No newline at end of file
-- 
2.25.1


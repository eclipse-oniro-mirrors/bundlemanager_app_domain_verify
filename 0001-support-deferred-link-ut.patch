From bfd571b31efa1d2be3f896e0ea3388013882c36c Mon Sep 17 00:00:00 2001
From: woohoa <wanghuan36@huawei.com>
Date: Sat, 26 Oct 2024 16:41:47 +0800
Subject: [PATCH] support deferred link ut

Change-Id: I7e278249ce9af8b356a7dd79e56acffa72f08cf1
---
 .../common/include/bms/bundle_info_query.h    |   3 +-
 .../common/src/bms/bundle_info_query.cpp      |  24 +-
 .../src/app_domain_verify_mgr_client.cpp      |   2 +-
 services/BUILD.gn                             |   1 +
 .../core/app_domain_verify_mgr_service.h      |   4 +-
 .../core/i_app_domain_verify_mgr_service.h    |   2 +-
 .../manager/deferred_link/ability_filter.h    |  40 ++++
 .../manager/deferred_link/deferred_link_mgr.h |  46 ++--
 .../app_domain_verify_mgr_service_proxy.h     |   2 +-
 .../core/app_domain_verify_mgr_service.cpp    |  14 +-
 .../manager/deferred_link/ability_filter.cpp  |  36 +++
 .../deferred_link/deferred_link_mgr.cpp       | 127 +++++++----
 .../app_domain_verify_mgr_service_proxy.cpp   |   4 +-
 .../app_domain_verify_mgr_service_stub.cpp    |   5 +-
 test/unittest/BUILD.gn                        |   1 +
 test/unittest/mock/include/mock_verify_mgr.h  |   8 +
 test/unittest/moduletest/BUILD.gn             |   1 +
 .../BUILD.gn                                  |   3 +
 .../services/deferred_link_test/BUILD.gn      |  80 +++++++
 .../deferred_link_mgr_test.cpp                | 209 +++++++++++++++++-
 .../deferred_link_test/mock_ability_filter.h  |  27 +++
 21 files changed, 545 insertions(+), 94 deletions(-)
 create mode 100644 services/include/manager/deferred_link/ability_filter.h
 create mode 100644 services/src/manager/deferred_link/ability_filter.cpp
 create mode 100644 test/unittest/services/deferred_link_test/BUILD.gn
 create mode 100644 test/unittest/services/deferred_link_test/mock_ability_filter.h

diff --git a/frameworks/common/include/bms/bundle_info_query.h b/frameworks/common/include/bms/bundle_info_query.h
index 862a9a1..4ad898f 100644
--- a/frameworks/common/include/bms/bundle_info_query.h
+++ b/frameworks/common/include/bms/bundle_info_query.h
@@ -26,7 +26,8 @@ class BundleInfoQuery {
 public:
     static bool GetBundleInfo(const std::string& bundleName, std::string& appIdentifier, std::string& fingerprint);
     static bool GetBundleNameForUid(const int uid, std::string& bundleName);
-    static bool QueryAbilityInfosByUrl(const std::string& url, std::vector<AbilityInfo>& abilityInfos);
+    static bool QueryAbilityInfosByUrl(
+        const std::string& bundleName, const std::string& url, std::vector<AbilityInfo>& abilityInfos);
     static bool GetBundleNameSelf(std::string& bundleName);
 private:
     static sptr<AppExecFwk::IBundleMgr> GetBundleMgrProxy();
diff --git a/frameworks/common/src/bms/bundle_info_query.cpp b/frameworks/common/src/bms/bundle_info_query.cpp
index 394064c..0e10a04 100644
--- a/frameworks/common/src/bms/bundle_info_query.cpp
+++ b/frameworks/common/src/bms/bundle_info_query.cpp
@@ -19,10 +19,13 @@
 #include "system_ability_definition.h"
 #include "iservice_registry.h"
 #include "app_domain_verify_hisysevent.h"
+#include "ipc_skeleton.h"
 
 namespace OHOS {
 namespace AppDomainVerify {
-
+constexpr const char* ACTION_VIEW_DATA = "ohos.want.action.viewData";
+constexpr const char* ENTITY_BROWSER = "entity.system.browsable";
+constexpr int USER_ID_DEFAULT = 100;
 bool BundleInfoQuery::GetBundleInfo(const std::string& bundleName, std::string& appIdentifier, std::string& fingerprint)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
@@ -103,8 +106,10 @@ bool BundleInfoQuery::GetBundleNameForUid(const int uid, std::string& bundleName
         return false;
     }
 
-    OHOS::AppExecFwk::BundleInfo bundleInfo;
+    // use sa identity
+    std::string identity = IPCSkeleton::ResetCallingIdentity();
     auto ret = bundleMgrProxy->GetBundleNameForUid(uid, bundleName);
+    IPCSkeleton::SetCallingIdentity(identity);
     if (ret != ERR_OK) {
         APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
         return false;
@@ -133,7 +138,8 @@ bool BundleInfoQuery::GetBundleNameSelf(std::string& bundleName)
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
     return true;
 }
-bool BundleInfoQuery::QueryAbilityInfosByUrl(const std::string& url, std::vector<AbilityInfo>& abilityInfos)
+bool BundleInfoQuery::QueryAbilityInfosByUrl(
+    const std::string& bundleName, const std::string& url, std::vector<AbilityInfo>& abilityInfos)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "called");
     sptr<AppExecFwk::IBundleMgr> bundleMgrProxy = GetBundleMgrProxy();
@@ -144,12 +150,18 @@ bool BundleInfoQuery::QueryAbilityInfosByUrl(const std::string& url, std::vector
         return false;
     }
     Want want;
+    want.SetBundle(bundleName);
     want.SetUri(url);
-    OHOS::AppExecFwk::BundleInfo bundleInfo;
+    want.AddEntity(ENTITY_BROWSER);
+    want.SetAction(ACTION_VIEW_DATA);
+
+    // use sa identity
+    std::string identity = IPCSkeleton::ResetCallingIdentity();
     auto ret = bundleMgrProxy->QueryAbilityInfosV9(
-        want, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, 0, abilityInfos);
+        want, AppExecFwk::AbilityInfoFlag::GET_ABILITY_INFO_DEFAULT, USER_ID_DEFAULT, abilityInfos);
+    IPCSkeleton::SetCallingIdentity(identity);
     if (ret != ERR_OK) {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
+        APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "GetBundleInfo failed, ret: %{public}d.", ret);
         return false;
     }
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MODULE_COMMON, "call end");
diff --git a/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp b/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp
index 47d79db..c87e78d 100644
--- a/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp
+++ b/interfaces/inner_api/client/src/app_domain_verify_mgr_client.cpp
@@ -329,7 +329,7 @@ int AppDomainVerifyMgrClient::GetDeferredLink(std::string& link)
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "bundleInfo %{public}s", bundleName.c_str());
     std::lock_guard<std::mutex> autoLock(proxyLock_);
     if (IsServiceAvailable()) {
-        return appDomainVerifyMgrServiceProxy_->GetDeferredLink(bundleName, link);
+        return appDomainVerifyMgrServiceProxy_->GetDeferredLink(link);
     }
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "call end");
     return CommonErrorCode::E_INTERNAL_ERR;
diff --git a/services/BUILD.gn b/services/BUILD.gn
index d42cf3f..4e39d3e 100644
--- a/services/BUILD.gn
+++ b/services/BUILD.gn
@@ -58,6 +58,7 @@ ohos_shared_library("app_domain_verify_mgr_service") {
     "${app_domain_verify_frameworks_common_path}/src/utils/domain_url_util.cpp",
     "src/manager/core/app_domain_verify_data_mgr.cpp",
     "src/manager/core/app_domain_verify_mgr_service.cpp",
+    "src/manager/deferred_link/ability_filter.cpp",
     "src/manager/deferred_link/deferred_link_mgr.cpp",
     "src/manager/permission/permission_manager.cpp",
     "src/manager/rdb/app_domain_verify_rdb_data_manager.cpp",
diff --git a/services/include/manager/core/app_domain_verify_mgr_service.h b/services/include/manager/core/app_domain_verify_mgr_service.h
index e742d9a..97304f9 100644
--- a/services/include/manager/core/app_domain_verify_mgr_service.h
+++ b/services/include/manager/core/app_domain_verify_mgr_service.h
@@ -52,7 +52,7 @@ public:
     API_EXPORT int QueryAssociatedDomains(const std::string& bundleName, std::vector<std::string>& domains) override;
     API_EXPORT int QueryAssociatedBundleNames(
         const std::string& domain, std::vector<std::string>& bundleNames) override;
-    API_EXPORT int GetDeferredLink(const std::string& bundleName, std::string& link) override;
+    API_EXPORT int GetDeferredLink(std::string& link) override;
 
 protected:
     void OnDump() override;
@@ -71,7 +71,7 @@ private:
     bool InitConfigMgr();
     std::shared_ptr<WhiteListConfigMgr> whiteListConfigMgr_;
     std::mutex initConfigMutex_;
-    std::shared_ptr<DeferredLinkMgr> deferredLinkMgr_;
+    std::shared_ptr<DeferredLinkMgr> deferredLinkMgr_ = std::make_shared<DeferredLinkMgr>();
 };
 }  // namespace AppDomainVerify
 }  // namespace OHOS
diff --git a/services/include/manager/core/i_app_domain_verify_mgr_service.h b/services/include/manager/core/i_app_domain_verify_mgr_service.h
index 46ec1ae..9d7f09b 100644
--- a/services/include/manager/core/i_app_domain_verify_mgr_service.h
+++ b/services/include/manager/core/i_app_domain_verify_mgr_service.h
@@ -43,7 +43,7 @@ public:
     virtual void ConvertToExplicitWant(OHOS::AAFwk::Want& implicitWant, sptr<IConvertCallback>& callback) = 0;
     virtual int QueryAssociatedDomains(const std::string& bundleName, std::vector<std::string>& domains) = 0;
     virtual int QueryAssociatedBundleNames(const std::string& domain, std::vector<std::string>& bundleNames) = 0;
-    virtual int GetDeferredLink(const std::string& bundleName, std::string& link) = 0;
+    virtual int GetDeferredLink(std::string& link) = 0;
     DECLARE_INTERFACE_DESCRIPTOR(u"ohos.appDomainVerify.IAppDomainVerifyMgrService");
 };
 }  // namespace AppDomainVerify
diff --git a/services/include/manager/deferred_link/ability_filter.h b/services/include/manager/deferred_link/ability_filter.h
new file mode 100644
index 0000000..7857f1e
--- /dev/null
+++ b/services/include/manager/deferred_link/ability_filter.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef APP_DOMAIN_VERIFY_ABILITY_FILTER_H
+#define APP_DOMAIN_VERIFY_ABILITY_FILTER_H
+
+#include <string>
+#include <memory>
+
+namespace OHOS::AppDomainVerify {
+struct FilterInfo {
+    std::string bundleName;
+    std::string url;
+};
+class AbilityFilter {
+public:
+    /**
+     * Filter
+     * @descrition filter info can match abilities.
+     * @param info the info to filer.
+     * @return bool return true if can match abilities else false.
+     */
+    virtual bool Filter(const FilterInfo& info) = 0;
+    virtual ~AbilityFilter() = default;
+    static std::shared_ptr<AbilityFilter> Create();
+};
+}
+#endif  // APP_DOMAIN_VERIFY_ABILITY_FILTER_H
diff --git a/services/include/manager/deferred_link/deferred_link_mgr.h b/services/include/manager/deferred_link/deferred_link_mgr.h
index 9bb9363..77a4c63 100644
--- a/services/include/manager/deferred_link/deferred_link_mgr.h
+++ b/services/include/manager/deferred_link/deferred_link_mgr.h
@@ -1,6 +1,17 @@
-//
-// Created by w00373214 on 10/21/24.
-//
+/*
+ * Copyright (C) 2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 
 #ifndef APP_DOMAIN_VERIFY_DEFERRED_LINK_MGR_H
 #define APP_DOMAIN_VERIFY_DEFERRED_LINK_MGR_H
@@ -12,7 +23,7 @@
 #include "event_handler.h"
 #include "event_runner.h"
 #include "app_domain_verify_hilog.h"
-#include "bundle_info_query.h"
+#include "ability_filter.h"
 
 namespace OHOS::AppDomainVerify {
 
@@ -22,14 +33,14 @@ struct DeferredLinkInfo {
     int64_t timeStamp;
 };
 /**
- * PutDeferredLink
- * @descrition put deferred link info
- * @param domain the domain of url.
- * @param url the url to open.
+ * DeferredLinkMgr
+ * @descrition
+ * The mgr keeps limited links which are generated when the link is clicked but app is not installed.
+ * After app installed, app can get the link which click to open it, and app can continue the browsing.
  */
 class DeferredLinkMgr {
 public:
-    DeferredLinkMgr() = default;
+    DeferredLinkMgr();
     /**
      * PutDeferredLink
      * @descrition put deferred link info
@@ -37,24 +48,33 @@ public:
      * @param url the url to open.
      */
     void PutDeferredLink(const DeferredLinkInfo& info);
+
     /**
      * GetDeferredLink
-     * @descrition get deferred link within domains
+     * @descrition get deferred link within domains and bundleName
      * @param domains the domains to filter link info.
      * @return url the deferred url to open.
      */
-    std::string GetDeferredLink(const std::vector<std::string>& domains);
+    std::string GetDeferredLink(const std::string& bundleName, const std::vector<std::string>& domains);
 
     ~DeferredLinkMgr();
 
 private:
-    static bool CanMatchAbility(const std::string& url);
+    bool CanMatchAbility(const std::string& bundleName, const std::string& url);
     void PostAgeTask();
     void AgeCacheProcess();
+    void CheckStartTimerUnlocked();
+    void CheckFullUnlocked(const DeferredLinkInfo& info);
+    void CheckExistedUnlocked(const DeferredLinkInfo& info);
+    /**
+     * cache list
+     * @descrition list contains deferred link info, newly in front, older in back.
+     */
     std::list<DeferredLinkInfo> caches;
-    std::mutex mutex_;
+    std::mutex cachesMutex_;
     std::shared_ptr<AppExecFwk::EventHandler> ageHandler_;
     std::shared_ptr<AppExecFwk::EventRunner> ageRunner_;
+    std::shared_ptr<AbilityFilter> abilityFilter_ = AbilityFilter::Create();
 };
 }
 #endif  // APP_DOMAIN_VERIFY_DEFERRED_LINK_MGR_H
diff --git a/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h b/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h
index 264ee94..55d5f70 100644
--- a/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h
+++ b/services/include/manager/zidl/app_domain_verify_mgr_service_proxy.h
@@ -41,7 +41,7 @@ public:
     void UpdateWhiteListUrls(const std::vector<std::string>& urls) override;
     int QueryAssociatedDomains(const std::string& bundleName, std::vector<std::string>& domains) override;
     int QueryAssociatedBundleNames(const std::string& domain, std::vector<std::string>& bundleNames) override;
-    int GetDeferredLink(const std::string& bundleName, std::string& link) override;
+    int GetDeferredLink(std::string& link) override;
 private:
     static inline BrokerDelegator<AppDomainVerifyMgrServiceProxy> delegator_;
 };
diff --git a/services/src/manager/core/app_domain_verify_mgr_service.cpp b/services/src/manager/core/app_domain_verify_mgr_service.cpp
index f3b863d..79ef31c 100644
--- a/services/src/manager/core/app_domain_verify_mgr_service.cpp
+++ b/services/src/manager/core/app_domain_verify_mgr_service.cpp
@@ -23,8 +23,6 @@
 #include "domain_url_util.h"
 #include "app_domain_verify_agent_client.h"
 #include "comm_define.h"
-#include "deferred_link_mgr.h"
-#include "uri.h"
 #include "bundle_info_query.h"
 namespace OHOS {
 namespace AppDomainVerify {
@@ -334,13 +332,15 @@ void AppDomainVerifyMgrService::CollectDomains(
             make_pair(uri, std::make_tuple(InnerVerifyStatus::UNKNOWN, std::string(), 0)));
     }
 }
-int AppDomainVerifyMgrService::GetDeferredLink(const std::string& bundleName, std::string& link)
+int AppDomainVerifyMgrService::GetDeferredLink(std::string& link)
 {
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called");
-    if (!PermissionManager::IsSACall()) {
+    std::string bundleName;
+    BundleInfoQuery::GetBundleNameForUid(IPCSkeleton::GetCallingUid(), bundleName);
+    if (!bundleName.empty()) {
         std::vector<std::string> domains;
-        if (dataManager_->QueryAssociatedDomains(bundleName, domains)) {
-            link = deferredLinkMgr_->GetDeferredLink(domains);
+        if (dataManager_->QueryAssociatedDomains(bundleName, domains) && !domains.empty()) {
+            link = deferredLinkMgr_->GetDeferredLink(bundleName, domains);
             APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "get link, %{private}s.", link.c_str());
             return CommonErrorCode::E_OK;
         } else {
@@ -348,7 +348,7 @@ int AppDomainVerifyMgrService::GetDeferredLink(const std::string& bundleName, st
             return CommonErrorCode::E_INTERNAL_ERR;
         }
     } else {
-        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "no support no app call.");
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "can not get bundleName.");
         return CommonErrorCode::E_PERMISSION_DENIED;
     }
 }
diff --git a/services/src/manager/deferred_link/ability_filter.cpp b/services/src/manager/deferred_link/ability_filter.cpp
new file mode 100644
index 0000000..3e8633d
--- /dev/null
+++ b/services/src/manager/deferred_link/ability_filter.cpp
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#include "ability_filter.h"
+#include "bundle_info_query.h"
+
+namespace OHOS::AppDomainVerify {
+
+class AbilityFilterImpl : public AbilityFilter {
+public:
+    bool Filter(const FilterInfo& info) override
+    {
+        bool result{ false };
+        std::vector<AbilityInfo> abilityInfos;
+        if (BundleInfoQuery::QueryAbilityInfosByUrl(info.bundleName, info.url, abilityInfos)) {
+            result = !abilityInfos.empty();
+        }
+        return result;
+    }
+};
+std::shared_ptr<AbilityFilter> AbilityFilter::Create()
+{
+    return std::shared_ptr<AbilityFilterImpl>();
+}
+}
\ No newline at end of file
diff --git a/services/src/manager/deferred_link/deferred_link_mgr.cpp b/services/src/manager/deferred_link/deferred_link_mgr.cpp
index 76e92d4..668416b 100644
--- a/services/src/manager/deferred_link/deferred_link_mgr.cpp
+++ b/services/src/manager/deferred_link/deferred_link_mgr.cpp
@@ -1,6 +1,17 @@
-//
-// Created by w00373214 on 10/23/24.
-//
+/*
+ * Copyright (C) 2024 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 #include "deferred_link_mgr.h"
 
 namespace OHOS::AppDomainVerify {
@@ -8,70 +19,50 @@ namespace {
 constexpr const char* TASK_ID = "age";
 constexpr int32_t DELAY_TIME = 120000;       // 2min
 constexpr int64_t MAX_CACHE_TIME = 1200000;  // 10min
-constexpr int MAX_SIZE = 50;
+constexpr int MAX_CACHE_SIZE = 50;
 }
 void DeferredLinkMgr::PutDeferredLink(const DeferredLinkInfo& info)
 {
-    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
-    std::unique_lock<std::mutex> lock(mutex_);
-    if (caches.size() == MAX_SIZE) {
-        caches.pop_back();
-    }
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
+    std::unique_lock<std::mutex> lock(cachesMutex_);
+    CheckExistedUnlocked(info);
+    CheckFullUnlocked(info);
+
     caches.push_front(info);
-    if (caches.size() == 1) {
-        PostAgeTask();
-    }
-    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "info domain:%{private}s, url:%{private}s.",
+
+    CheckStartTimerUnlocked();
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "info domain:%{private}s, url:%{private}s.",
         info.domain.c_str(), info.url.c_str());
 }
-/**
- * GetDeferredLink
- * @descrition get deferred link within domains
- * @param domains the domains to filter link info.
- * @return url the deferred url to open.
- */
-std::string DeferredLinkMgr::GetDeferredLink(const std::vector<std::string>& domains)
+
+std::string DeferredLinkMgr::GetDeferredLink(const std::string& bundleName, const std::vector<std::string>& domains)
 {
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
     std::string result;
     std::set<std::string> domainSet(domains.begin(), domains.end());
-    std::unique_lock<std::mutex> lock(mutex_);
-    auto target = std::find_if(caches.cbegin(), caches.cend(), [&domainSet](const DeferredLinkInfo& linkInfo) {
-        Uri uri(linkInfo.url);
-        if (domainSet.count(uri.GetScheme() + "://" + uri.GetHost()) != 0 && CanMatchAbility(linkInfo.url)) {
-            APP_DOMAIN_VERIFY_HILOGI(
-                APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "find target url:%{private}s", linkInfo.url.c_str());
-            return true;
-        }
-        return false;
-    });
-    if (target != caches.end()) {
+    std::unique_lock<std::mutex> lock(cachesMutex_);
+    auto target = std::find_if(
+        caches.cbegin(), caches.cend(), [this, &bundleName, &domainSet](const DeferredLinkInfo& linkInfo) {
+            if (domainSet.count(linkInfo.domain) != 0 && CanMatchAbility(bundleName, linkInfo.url)) {
+                APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "matched.");
+                return true;
+            }
+            return false;
+        });
+    if (target != caches.cend()) {
         result = target->url;
         caches.erase(target);
+        APP_DOMAIN_VERIFY_HILOGD(
+            APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "erase after get url:%{private}s", result.c_str());
         return result;
     }
     APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "get deferred url:%{private}s", result.c_str());
     return result;
 }
 
-DeferredLinkMgr::~DeferredLinkMgr()
+bool DeferredLinkMgr::CanMatchAbility(const std::string& bundleName, const std::string& url)
 {
-}
-
-bool DeferredLinkMgr::CanMatchAbility(const std::string& url)
-{
-    bool result{ false };
-    std::vector<AbilityInfo> abilityInfos;
-    if (BundleInfoQuery::QueryAbilityInfosByUrl(url, abilityInfos)) {
-        for (const auto& ability : abilityInfos) {
-            APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE,
-                "QueryAbilityInfosByUrl name:%{private}s,bundle name:%{private}s.", ability.name.c_str(),
-                ability.bundleName.c_str());
-        }
-        result = true;
-    }
-    APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "CanMatchAbility %{public}d.", result);
-    return result;
+    return abilityFilter_->Filter({ .bundleName = bundleName, .url = url });
 }
 void DeferredLinkMgr::PostAgeTask()
 {
@@ -82,7 +73,7 @@ void DeferredLinkMgr::PostAgeTask()
 void DeferredLinkMgr::AgeCacheProcess()
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "age func in.");
-    std::unique_lock<std::mutex> lock(mutex_);
+    std::unique_lock<std::mutex> lock(cachesMutex_);
     int64_t now = GetSecondsSince1970ToNow();
     caches.remove_if([now](const DeferredLinkInfo& linkInfo) { return now - linkInfo.timeStamp >= MAX_CACHE_TIME; });
     if (!caches.empty()) {
@@ -92,4 +83,42 @@ void DeferredLinkMgr::AgeCacheProcess()
         APP_DOMAIN_VERIFY_HILOGI(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "age task end.");
     }
 }
+void DeferredLinkMgr::CheckStartTimerUnlocked()
+{
+    if (caches.size() == 1) {
+        PostAgeTask();
+    }
+}
+void DeferredLinkMgr::CheckFullUnlocked(const DeferredLinkInfo& info)
+{
+    if (caches.size() == MAX_CACHE_SIZE) {
+        caches.pop_back();
+    }
+}
+void DeferredLinkMgr::CheckExistedUnlocked(const DeferredLinkInfo& info)
+{
+    caches.remove_if([&info](const DeferredLinkInfo& curInfo) {
+        if (curInfo.url == info.url && curInfo.domain == info.domain) {
+            return true;
+        }
+        return false;
+    });
+    APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called.");
+}
+DeferredLinkMgr::DeferredLinkMgr()
+{
+    ageRunner_ = AppExecFwk::EventRunner::Create("age_deferred_link", AppExecFwk::ThreadMode::FFRT);
+    if (ageRunner_ == nullptr) {
+        APP_DOMAIN_VERIFY_HILOGE(APP_DOMAIN_VERIFY_AGENT_MODULE_SERVICE, "create runner failed.");
+        return;
+    }
+    ageHandler_ = std::make_shared<AppExecFwk::EventHandler>(ageRunner_);
+}
+
+DeferredLinkMgr::~DeferredLinkMgr()
+{
+    if (ageHandler_) {
+        ageHandler_->RemoveAllEvents();
+    }
+}
 }
\ No newline at end of file
diff --git a/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp b/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp
index b991d8d..9e90a20 100644
--- a/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp
+++ b/services/src/manager/zidl/app_domain_verify_mgr_service_proxy.cpp
@@ -323,15 +323,13 @@ int AppDomainVerifyMgrServiceProxy::QueryAssociatedBundleNames(
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "call end");
     return result;
 }
-int AppDomainVerifyMgrServiceProxy::GetDeferredLink(const std::string& bundleName, std::string& link)
+int AppDomainVerifyMgrServiceProxy::GetDeferredLink(std::string& link)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_CLIENT, "called");
     MessageParcel data;
     MessageParcel reply;
     MessageOption option;
     WRITE_PARCEL_AND_RETURN_INT_IF_FAIL(InterfaceToken, data, GetDescriptor());
-    WRITE_PARCEL_AND_RETURN_INT_IF_FAIL(String, data, bundleName);
-
     int32_t error = Remote()->SendRequest(
         AppDomainVerifyMgrInterfaceCode::GET_DEFERRED_LINK, data, reply, option);
     if (error != ERR_NONE) {
diff --git a/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp b/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp
index ad2f964..4a4987a 100644
--- a/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp
+++ b/services/src/manager/zidl/app_domain_verify_mgr_service_stub.cpp
@@ -268,11 +268,8 @@ int32_t AppDomainVerifyMgrServiceStub::OnQueryAssociatedBundleNames(MessageParce
 int32_t AppDomainVerifyMgrServiceStub::OnGetDeferredLink(MessageParcel& data, MessageParcel& reply)
 {
     APP_DOMAIN_VERIFY_HILOGD(APP_DOMAIN_VERIFY_MGR_MODULE_SERVICE, "called");
-    std::string bundleName;
-    READ_PARCEL_AND_RETURN_FALSE_IF_FAIL(String, data, bundleName);
-
     std::string link;
-    int ret = GetDeferredLink(bundleName, link);
+    int ret = GetDeferredLink(link);
 
     WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(Int32, reply, ret);
     WRITE_PARCEL_AND_RETURN_FALSE_IF_FAIL(String, reply, link);
diff --git a/test/unittest/BUILD.gn b/test/unittest/BUILD.gn
index 9f5a868..6ac027c 100644
--- a/test/unittest/BUILD.gn
+++ b/test/unittest/BUILD.gn
@@ -34,6 +34,7 @@ group("app_domain_verify_unit_test") {
     "services/app_domain_verify_data_mgr_test:app_domain_verify_data_mgr_test",
     "services/app_domain_verify_mgr_service_test:app_domain_verify_mgr_service_test",
     "services/app_domain_verify_rdb_test:app_domain_verify_rdb_test",
+    "services/deferred_link_test:deferred_link_test",
     "verifier:app_domain_verify_agent_verifier_test",
   ]
 }
diff --git a/test/unittest/mock/include/mock_verify_mgr.h b/test/unittest/mock/include/mock_verify_mgr.h
index 5e29f60..8324c12 100644
--- a/test/unittest/mock/include/mock_verify_mgr.h
+++ b/test/unittest/mock/include/mock_verify_mgr.h
@@ -73,6 +73,10 @@ public:
     {
         return true;
     }
+    virtual int GetDeferredLink(std::string& link) override
+    {
+        return true;
+    }
     MOCK_METHOD4(SendRequest, int(uint32_t, MessageParcel&, MessageParcel&, MessageOption&));
     MOCK_METHOD(sptr<IRemoteObject>, AsObject, (), (override));
 };
@@ -130,6 +134,10 @@ public:
     {
         return true;
     }
+    virtual int GetDeferredLink(std::string& link) override
+    {
+        return true;
+    }
 };
 }  // namespace AppDomainVerify
 }  // namespace OHOS
diff --git a/test/unittest/moduletest/BUILD.gn b/test/unittest/moduletest/BUILD.gn
index 545b3d2..2c39ca9 100644
--- a/test/unittest/moduletest/BUILD.gn
+++ b/test/unittest/moduletest/BUILD.gn
@@ -27,6 +27,7 @@ config("module_private_config") {
     "${app_domain_verify_service_path}/include/manager/core",
     "${app_domain_verify_service_path}/include/manager/constant",
     "${app_domain_verify_service_path}/include/manager/zidl",
+    "${app_domain_verify_service_path}/include/manager/deferred_link",
     "${app_domain_verify_common_path}/include",
     "${app_domain_verify_frameworks_common_path}/include",
     "${app_domain_verify_frameworks_common_path}/include/utils",
diff --git a/test/unittest/services/app_domain_verify_mgr_service_test/BUILD.gn b/test/unittest/services/app_domain_verify_mgr_service_test/BUILD.gn
index 59ff649..343312d 100644
--- a/test/unittest/services/app_domain_verify_mgr_service_test/BUILD.gn
+++ b/test/unittest/services/app_domain_verify_mgr_service_test/BUILD.gn
@@ -28,6 +28,7 @@ config("module_private_config") {
     "${app_domain_verify_service_path}/include/manager/constant",
     "${app_domain_verify_service_path}/include/manager/zidl",
     "${app_domain_verify_service_path}/include/manager/permission",
+    "${app_domain_verify_service_path}/include/manager/deferred_link",
     "${app_domain_verify_common_path}/include",
     "${app_domain_verify_frameworks_common_path}/include",
     "${app_domain_verify_frameworks_common_path}/include/utils",
@@ -44,6 +45,8 @@ ohos_unittest("app_domain_verify_mgr_service_test") {
   sources = [
     "${app_domain_verify_service_path}/src/manager/core/app_domain_verify_data_mgr.cpp",
     "${app_domain_verify_service_path}/src/manager/core/app_domain_verify_mgr_service.cpp",
+    "${app_domain_verify_service_path}/src/manager/deferred_link/ability_filter.cpp",
+    "${app_domain_verify_service_path}/src/manager/deferred_link/deferred_link_mgr.cpp",
     "${app_domain_verify_service_path}/src/manager/permission/permission_manager.cpp",
     "${app_domain_verify_service_path}/src/manager/rdb/app_domain_verify_rdb_data_manager.cpp",
     "${app_domain_verify_service_path}/src/manager/rdb/app_domain_verify_rdb_open_callback.cpp",
diff --git a/test/unittest/services/deferred_link_test/BUILD.gn b/test/unittest/services/deferred_link_test/BUILD.gn
new file mode 100644
index 0000000..665184a
--- /dev/null
+++ b/test/unittest/services/deferred_link_test/BUILD.gn
@@ -0,0 +1,80 @@
+# Copyright (C) 2023 Huawei Device Co., Ltd.
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+import("//build/test.gni")
+import("//foundation/bundlemanager/app_domain_verify/app_domain_verify.gni")
+
+config("module_private_config") {
+  visibility = [ ":*" ]
+  configs = [ "//build/config/compiler:exceptions" ]
+  include_dirs = [
+    "${app_domain_verify_client_path}/include",
+    "${app_domain_verify_service_path}/include",
+    "${app_domain_verify_service_path}/include/agent/core",
+    "${app_domain_verify_service_path}/include/agent/zidl",
+    "${app_domain_verify_service_path}/include/manager/rdb",
+    "${app_domain_verify_service_path}/include/manager/core",
+    "${app_domain_verify_service_path}/include/manager/constant",
+    "${app_domain_verify_service_path}/include/manager/zidl",
+    "${app_domain_verify_service_path}/include/manager/permission",
+    "${app_domain_verify_service_path}/include/manager/deferred_link",
+    "${app_domain_verify_common_path}/include",
+    "${app_domain_verify_frameworks_common_path}/include",
+    "${app_domain_verify_frameworks_common_path}/include/utils",
+    "${app_domain_verify_frameworks_common_path}/include/bms",
+    "${app_domain_verify_frameworks_extension_path}/include",
+    "${app_domain_verify_test_path}/mock/include",
+    "${app_domain_verify_frameworks_common_path}/include/dfx",
+  ]
+}
+
+module_output_path = "app_domain_verify/app_domain_verify"
+ohos_unittest("deferred_link_test") {
+  module_out_path = module_output_path
+
+  sources = [
+    "${app_domain_verify_service_path}/src/manager/deferred_link/ability_filter.cpp",
+    "${app_domain_verify_service_path}/src/manager/deferred_link/deferred_link_mgr.cpp",
+    "${app_domain_verify_test_path}/mock/src/mock_bundle_manager.cpp",
+    "deferred_link_mgr_test.cpp",
+  ]
+  configs = [ ":module_private_config" ]
+  external_deps = [
+    "ability_base:want",
+    "ability_base:zuri",
+    "access_token:libaccesstoken_sdk",
+    "access_token:libnativetoken_shared",
+    "access_token:libtokenid_sdk",
+    "access_token:libtokensetproc_shared",
+    "bundle_framework:appexecfwk_base",
+    "bundle_framework:appexecfwk_core",
+    "c_utils:utils",
+    "eventhandler:libeventhandler",
+    "ffrt:libffrt",
+    "hilog:libhilog",
+    "hisysevent:libhisysevent",
+    "image_framework:image_native",
+    "init:libbegetutil",
+    "ipc:ipc_core",
+    "netstack:http_client",
+    "os_account:os_account_innerkits",
+    "relational_store:native_rdb",
+    "samgr:samgr_proxy",
+  ]
+
+  defines = [ "API_EXPORT=__attribute__((visibility (\"default\")))" ]
+  deps = [
+    "//third_party/googletest:gmock_main",
+    "//third_party/googletest:gtest_main",
+  ]
+}
diff --git a/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
index 5941372..26e1ca5 100644
--- a/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
+++ b/test/unittest/services/deferred_link_test/deferred_link_mgr_test.cpp
@@ -16,13 +16,23 @@
 #include "mock_constant.h"
 #define private public
 #define protected public
+#include "ability_filter.h"
 #include "deferred_link_mgr.h"
 #undef private
 #undef protected
+#include "mock_ability_filter.h"
 namespace OHOS::AppDomainVerify {
 using namespace testing;
 using namespace testing::ext;
-
+constexpr const char* BUNDLE_NAME_WRONG = "BUNDLE_NAME_WRONG";
+constexpr const char* BUNDLE_DOMAIN = "https://www.openharmony.cn";
+constexpr const char* BUNDLE_DOMAIN_WRONG = "https://www.openharmony_wrong.cn";
+constexpr const char* BUNDLE_URL = "https://www.openharmony.cn/100";
+constexpr const char* BUNDLE_URL_NEW = "https://www.openharmony.cn/new";
+constexpr const char* TASK_ID = "age";
+constexpr int32_t DELAY_TIME = 120000;       // 2min
+constexpr int64_t MAX_CACHE_TIME = 1200000;  // 10min
+constexpr int MAX_CACHE_SIZE = 50;
 class DeferredLinkMgrTest : public testing::Test {
 public:
     static void SetUpTestCase(void);
@@ -46,16 +56,203 @@ void DeferredLinkMgrTest::SetUp(void)
 void DeferredLinkMgrTest::TearDown(void)
 {
 }
+
+/**
+ * @tc.name: DeferredLinkPutTest001
+ * @tc.desc: put one link, remain one.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkPutTest001, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+    EXPECT_TRUE(deferredLinkMgr.caches.front().domain == BUNDLE_DOMAIN);
+    EXPECT_TRUE(deferredLinkMgr.caches.front().url == BUNDLE_URL);
+}
+
+/**
+ * @tc.name: DeferredLinkPutTest002
+ * @tc.desc: put max_size + 1 link, will remain maxsize.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkPutTest002, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+
+    for (int i = 0; i < MAX_CACHE_SIZE + 1; i++) {
+        deferredLinkMgr.PutDeferredLink({ .domain = BUNDLE_DOMAIN + std::to_string(i),
+            .url = BUNDLE_URL,
+            .timeStamp = GetSecondsSince1970ToNow() });
+    }
+
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == MAX_CACHE_SIZE);
+    EXPECT_EQ(deferredLinkMgr.caches.back().domain, BUNDLE_DOMAIN + std::to_string(1));
+    EXPECT_EQ(deferredLinkMgr.caches.front().domain, BUNDLE_DOMAIN + std::to_string(MAX_CACHE_SIZE));
+}
+
+/**
+ * @tc.name: DeferredLinkPutTest003
+ * @tc.desc: put duplicate link, will unique and in back.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkPutTest003, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN + std::to_string(1), .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 2);
+    EXPECT_EQ(deferredLinkMgr.caches.back().domain, BUNDLE_DOMAIN + std::to_string(1));
+    EXPECT_EQ(deferredLinkMgr.caches.front().domain, BUNDLE_DOMAIN);
+}
+
+/**
+ * @tc.name: DeferredLinkGetTest001
+ * @tc.desc: get link with matched domain and matched url, return link.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest001, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+    std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
+    EXPECT_CALL(*filter, Filter(_)).Times(1).WillOnce(Return(true));
+    deferredLinkMgr.abilityFilter_ = filter;
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+
+    std::vector<std::string> domains;
+    domains.emplace_back(BUNDLE_DOMAIN);
+    auto link = deferredLinkMgr.GetDeferredLink(BUNDLE_NAME, domains);
+
+    EXPECT_FALSE(link.empty());
+    EXPECT_EQ(link, BUNDLE_URL);
+    EXPECT_TRUE(deferredLinkMgr.caches.empty());
+}
+
+/**
+ * @tc.name: DeferredLinkGetTest002
+ * @tc.desc: get link with unmatched domains and matched bundleName, return none.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest002, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+    std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
+    EXPECT_CALL(*filter, Filter(_)).Times(0);
+    deferredLinkMgr.abilityFilter_ = filter;
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+
+    std::vector<std::string> domains;
+    domains.emplace_back(BUNDLE_DOMAIN_WRONG);
+    auto link = deferredLinkMgr.GetDeferredLink(BUNDLE_NAME, domains);
+
+    EXPECT_TRUE(link.empty());
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+}
+
 /**
- * @tc.name: RdbOpenCallbackTest001
- * @tc.desc: Callback test
+ * @tc.name: DeferredLinkGetTest003
+ * @tc.desc: get link with unmatched domains and matched bundleName, return none.
  * @tc.type: FUNC
  */
-HWTEST_F(DeferredLinkMgrTest, RdbOpenCallbackTest001, TestSize.Level0)
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest003, TestSize.Level0)
 {
     DeferredLinkMgr deferredLinkMgr;
-    deferredLinkMgr.PutDeferredLink();
-    deferredLinkMgr.GetDeferredLink();
+    deferredLinkMgr.ageHandler_ = nullptr;
+    std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
+    EXPECT_CALL(*filter, Filter(_)).Times(0);
+    deferredLinkMgr.abilityFilter_ = filter;
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+
+    std::vector<std::string> domains;
+    domains.emplace_back(BUNDLE_DOMAIN_WRONG);
+    auto link = deferredLinkMgr.GetDeferredLink(BUNDLE_NAME, domains);
+
+    EXPECT_TRUE(link.empty());
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
 }
 
+/**
+ * @tc.name: DeferredLinkGetTest004
+ * @tc.desc: get link with unmatched bundleName and matched domains, return none.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest004, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+    std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
+    EXPECT_CALL(*filter, Filter(_)).Times(1).WillOnce(Return(false));
+    deferredLinkMgr.abilityFilter_ = filter;
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+
+    std::vector<std::string> domains;
+    domains.emplace_back(BUNDLE_DOMAIN);
+    auto link = deferredLinkMgr.GetDeferredLink(BUNDLE_NAME_WRONG, domains);
+
+    EXPECT_TRUE(link.empty());
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+}
+
+/**
+ * @tc.name: DeferredLinkGetTest005
+ * @tc.desc: get link with matched domain and matched url, return back link.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkGetTest005, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+    std::shared_ptr<MocAbilityFilter> filter = std::make_shared<MocAbilityFilter>();
+    EXPECT_CALL(*filter, Filter(_)).Times(1).WillOnce(Return(true));
+    deferredLinkMgr.abilityFilter_ = filter;
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL_NEW, .timeStamp = GetSecondsSince1970ToNow() });
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 2);
+
+    std::vector<std::string> domains;
+    domains.emplace_back(BUNDLE_DOMAIN);
+    auto link = deferredLinkMgr.GetDeferredLink(BUNDLE_NAME, domains);
+
+    EXPECT_FALSE(link.empty());
+    EXPECT_EQ(link, BUNDLE_URL_NEW);
+    EXPECT_TRUE(deferredLinkMgr.caches.size() == 1);
+}
+
+/**
+ * @tc.name: DeferredLinkAgeTest001
+ * @tc.desc: put one , will trigger age task after time count.
+ * @tc.type: FUNC
+ */
+HWTEST_F(DeferredLinkMgrTest, DeferredLinkAgeTest001, TestSize.Level0)
+{
+    DeferredLinkMgr deferredLinkMgr;
+    deferredLinkMgr.ageHandler_ = nullptr;
+
+    deferredLinkMgr.PutDeferredLink(
+        { .domain = BUNDLE_DOMAIN, .url = BUNDLE_URL, .timeStamp = GetSecondsSince1970ToNow() });
+}
 }
\ No newline at end of file
diff --git a/test/unittest/services/deferred_link_test/mock_ability_filter.h b/test/unittest/services/deferred_link_test/mock_ability_filter.h
new file mode 100644
index 0000000..3a9693d
--- /dev/null
+++ b/test/unittest/services/deferred_link_test/mock_ability_filter.h
@@ -0,0 +1,27 @@
+/*
+* Copyright (C) 2024 Huawei Device Co., Ltd.
+* Licensed under the Apache License, Version 2.0 (the "License");
+* you may not use this file except in compliance with the License.
+* You may obtain a copy of the License at
+*
+*     http://www.apache.org/licenses/LICENSE-2.0
+*
+* Unless required by applicable law or agreed to in writing, software
+* distributed under the License is distributed on an "AS IS" BASIS,
+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+* See the License for the specific language governing permissions and
+* limitations under the License.
+*/
+
+#ifndef APP_DOMAIN_VERIFY_MOCK_ABILITY_FILTER_H
+#define APP_DOMAIN_VERIFY_MOCK_ABILITY_FILTER_H
+#include "ability_filter.h"
+#include <gmock/gmock.h>
+namespace OHOS::AppDomainVerify {
+class MocAbilityFilter : public AbilityFilter {
+public:
+    MOCK_METHOD(bool, Filter, (const FilterInfo& info),
+        (override));
+};
+}
+#endif  // APP_DOMAIN_VERIFY_MOCK_ABILITY_FILTER_H
-- 
2.25.1

